<?xml version="1.0" encoding="utf-8"?>
<app:FrameworkApplication
	xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:app="net.telepol.app.*" layout="absolute"
	borderColor="#F2F2F2" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#F2F2F2, #F2F2F2]"
	backgroundColor="#F2F2F2"
	applicationComplete="load()"
	initialize="init()" xmlns:local="*">

<mx:Style source="../../../libs/framework/src/net/telepol/telenet/main.css" />

<mx:Script>
	<![CDATA[
		import mx.controls.advancedDataGridClasses.AdvancedDataGridRendererProvider;
		import mx.controls.AdvancedDataGrid;
		import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import mx.containers.TitleWindow;
		import flash.sampler.Sample;
		import mx.utils.ObjectUtil;
		import net.telepol.rpc.FlexVar;
		import mx.formatters.DateBase;
		import mx.collections.ArrayCollection;
		
		[Bindable] public var arr_earnings:ArrayCollection;
		[Bindable] public var arr_months:ArrayCollection;
		[Bindable] public var firm_regions:ArrayCollection;
		[Bindable] public var arr_filter:ArrayCollection;
		
		[Bindable] public var arr_filter_earnings:ArrayCollection;
		
		[Bindable] public var total_earning:String = "";
		
		[Bindable] private var mnameslong:Array = ['Януари','Февруари','Март','Април','Май','Юни','Юли','Август','Септември','Октомври','Ноември','Декември'];
		[Bindable] private var dnamesshort:Array = ['Нд.','Пн.','Вт.','Ср.','Чт.','Пт.','Сб.'];
		[Bindable] private var mnamesshort:Array = ['Яну','Фев','Март','Апр','Май','Юни','Юли','Авг','Септ','Окт','Ноем','Дек'];
	
		[Bindable] public var currDateIndex:int = 2;
		private function getCurrentDate(currIndex:int):String {
			if (arr_months && (arr_months.length > 0) && (currIndex >= 0) && (currIndex < arr_months.length)){
				return monthFormatter.format(getDate(arr_months[currIndex]));
			}
			currDateIndex = -1;
			return "";
		}
		private function updateCurrentDate(delta:int):void {
			if (arr_months && (arr_months.length > 0)){
				var newIndex:int = currDateIndex + delta;
				if (newIndex < 0)
					newIndex = 0;
				else {
					if ( newIndex > (arr_months.length-1))
						newIndex = arr_months.length-1;
					if ( newIndex > currDateIndexTo)
						newIndex = currDateIndexTo;
				}
				currDateIndex = newIndex;
				lblDate.text = getCurrentDate(currDateIndex);
				
				lbBack.enabled = (currDateIndex > 0);
				try{
					lbNext.enabled = (currDateIndex < arr_months.length-1);
				} catch(e:Error){
					lbNext.enabled = false;
				}
			} else
				currDateIndex = -1;
		}
		
		[Bindable] public var currDateIndexTo:int = 2;
		private function getCurrentDateTo(currIndex:int):String {
			if (arr_months && (arr_months.length > 0) && (currIndex >= 0) && (currIndex < arr_months.length)){
				return monthFormatter.format(getDate(arr_months[currIndex]));
			}
			currDateIndexTo = -1;
			return "";
		}
		private function updateCurrentDateTo(delta:int):void {
			if (arr_months && (arr_months.length > 0)){
				var newIndex:int = currDateIndexTo + delta;
				if (newIndex < 0)
					newIndex = 0;
				else {
					if ( newIndex > (arr_months.length-1))
						newIndex = arr_months.length-1;
					if ( newIndex < currDateIndex)
						newIndex = currDateIndex;
				}
				currDateIndexTo = newIndex;
				lblDateTo.text = getCurrentDateTo(currDateIndexTo);
				
				lbBackTo.enabled = (currDateIndexTo > 0);
				try{
					lbNextTo.enabled = (currDateIndexTo < arr_months.length-1);
				} catch(e:Error){
					lbNextTo.enabled = false;
				}
			} else
				currDateIndexTo = -1;
		}


		private function getDate(d:String):Date {
			return new Date(
				int(d.substr(0,4)), 	// year
				int(d.substr(5,2))-1,	// month
				1						// day
			);
		}

		private function init():void {
			DateBase.monthNamesShort = mnamesshort;
			DateBase.monthNamesLong = mnameslong;
			updateCurrentDate(0);
			updateCurrentDateTo(0);
			
			amfService.addEventListener("onResponse", onResponse);
			amfService.addEventListener("onFault", onFault);
		}

		private var want_init:Boolean = false;
		private function load():void {
			want_init = true;
			amfService.init(false);
		}
		
		private function doExport(): void {
			//onTreeEarnChange();
			//TODO: send filter id
			ExternalInterface.call('dialogExcelDocCollections',
				cbFirms.selectedItem.children[0].fcode,
				cbOffices.selectedItem.rcode,
				cbFilters.selectedItem.id,
				monthFormatterExport.format(getDate(arr_months[currDateIndex])),
				monthFormatterExport.format(getDate(arr_months[currDateIndexTo]))
			);
		}
		
		private function doSearch(): void {
			chbRegionsView.selected = chbRegionsView.selected && chbRegionsView.enabled;
			amfService.search(
				new FlexVar("id_filter", cbFilters.selectedItem ? cbFilters.selectedItem.id : 0),
				new FlexVar('id_firm', cbFirms.selectedItem.children[0].fcode),
				new FlexVar('id_office', cbOffices.selectedItem.rcode),
				new FlexVar('regions_view', chbRegionsView.selected),
				new FlexVar('month_from', monthFormatterExport.format(getDate(arr_months[currDateIndex]))),
				new FlexVar('month_to', monthFormatterExport.format(getDate(arr_months[currDateIndexTo]))),
				false
			);
		}
		
		public var want_save_filter:Boolean = false;
		private function onResponse(e:Event):void {
			if (want_save_filter){
				want_save_filter = false;
				PopUpManager.removePopUp(titleWindow);
				return;
			}

			if (want_showEdit){
				want_showEdit = false;
				popUp(true);
				return;
			}
			
			if (want_showAdd){
				want_showAdd = false;
				popUp(false);
				return;
			}

			if (arr_months && arr_months.length > 0) {
				if (currDateIndex < 0){
					currDateIndex = arr_months.length-1;
					currDateIndexTo = currDateIndex;
					updateCurrentDate(0);
					updateCurrentDateTo(0);
					rowsGroupByFirm.refresh();
					var gg:Object = rowsGroupByFirm.getRoot();
					cbFirms.dataProvider = gg;
				}
			}
			
			if (want_init){
				want_init = false;
				doSearch();
			}

			//callLater(fillDGData, [adgEarn, btnEarExpand.selected]);
			//callLater(fillDGData, [adgExp, btnExpExpand.selected]);
			fillDGData(adgEarn, btnEarExpand.selected, '111');
			
			if (chbRegionsView.selected)
				onTreeChange(adgEarn, false);
		}
		
		private function onFault(e:Event):void {
			want_showEdit = false;
			want_showAdd = false;
			want_init = false;
		}
		
		private function onTreeChange(adg:AdvancedDataGrid, exp:Boolean):void {
			if (
				(adg == null) || (adg.dataProvider == null) || 
				(adg.dataProvider.source == null) || (adg.dataProvider.source.source == null)
				)
				return;
			for (var i:int = 0; i < adg.dataProvider.source.source.length; i++)
				adg.expandChildrenOf(adg.dataProvider.source.source[i], exp);
		}
		
		private function firm(item:Object):String {
			if (item && item.hasOwnProperty('children') && item.children)
				return item.children[0].firm
			else return ''
		}
		
		private function positionCompareFunction(a:Object, b:Object):int {
			if (a.fcode != b.fcode)
				return (a.fcode < b.fcode) ? -1 : 1;
			else
				return ObjectUtil.stringCompare(a.region, b.region);
		}
		
		private var titleWindow:TitleWindow;
		private function popUp(edit:Boolean):void {
			titleWindow = PopUpManager.createPopUp(this, filterAddEdit, true) as TitleWindow;
			if (edit){
				if (cbFilters.selectedItem){
					(titleWindow as filterAddEdit).chbDefault.selected = (cbFilters.selectedItem.is_default == 1);
					(titleWindow as filterAddEdit).filter_id = cbFilters.selectedItem.id;
					(titleWindow as filterAddEdit).filter_name = cbFilters.selectedItem.name;
				}
			} else {
				(titleWindow as filterAddEdit).chbDefault.selected = false;
				(titleWindow as filterAddEdit).filter_id = "0";
				(titleWindow as filterAddEdit).filter_name = "";
			}
			(titleWindow as filterAddEdit).arr_ear = arr_filter_earnings;
            PopUpManager.centerPopUp(titleWindow);
		}
		
		private var want_showEdit:Boolean = false; 
		private function showEditFilter():void {
			want_showEdit = true;
			amfService.init_filter(
				new FlexVar("id_filter", cbFilters.selectedItem ? cbFilters.selectedItem.id : 0),
				false
			);
		}
		
		private var want_showAdd:Boolean = false; 
		private function showAddFilter():void {
			want_showAdd = true;
			amfService.init_filter(
				new FlexVar("id_filter", 0),
				false
			);
		}

		private function deleteFilter():void {
			Alert.yesLabel = "Да";
			Alert.noLabel = "Не";
			Alert.show("Желаете ли да изтриете филтъра ?", "Въпрос", Alert.YES | Alert.NO, null,
				function (e:CloseEvent):void {
					if (e.detail == Alert.YES){
						amfService.delete_filter(
							new FlexVar("id_filter", cbFilters.selectedItem.id),
							false
						);
					}
				},
				null, Alert.NO
			);
		}
		
		public function showMoneyNomenclaturesDetails(o:Object, prefix:String): void {
			var sParams:String;
			var nom_id:String = (o.id < 0) ? o.id : prefix+o.id;
			var date_to:Date = getDate(arr_months[currDateIndexTo]);
			date_to['month'] += 1;
			date_to['date'] -= 1;
			
			sParams	= 'nIDNomenclature='+nom_id+'&nIDFirm='+cbFirms.selectedItem.children[0].fcode+'&nIDOffice='+cbOffices.selectedItem.rcode+'&nIDObject=0&sFromDate='+monthFormatterBG.format(getDate(arr_months[currDateIndex]))+'&sToDate='+monthFormatterBG.format(date_to)+'&sMonth=0';	
			ExternalInterface.call('dialogMoneyNomenclaturesDetails', sParams);
		}
		public function showMoneyNomenclaturesDetailsForMonth(o:Object, prefix:String, column_name:String): void {
			var sParams:String;
			var nom_id:String = (o.id < 0) ? o.id : prefix+o.id;
			var date_from:Date = getDate(column_name);
			var date_to:Date = getDate(column_name);
			date_to['month'] += 1;
			date_to['date'] -= 1;
			
			sParams	= 'nIDNomenclature='+nom_id+'&nIDFirm='+cbFirms.selectedItem.children[0].fcode+'&nIDOffice='+cbOffices.selectedItem.rcode+'&nIDObject=0&sFromDate='+monthFormatterBG.format(date_from)+'&sToDate='+monthFormatterBG.format(date_to)+'&sMonth=0';	
			ExternalInterface.call('dialogMoneyNomenclaturesDetails', sParams);
		}

		private function fillDGData(adg:AutoResizableADG, want_expand:Boolean, prefix:String):void {
			var cols:Array = new Array;// = myADG.columns;
			var datagridColumn:AdvancedDataGridColumn;
			
			adg.columns = cols;
			adg.horizontalScrollPolicy = "off";
			
			datagridColumn = new AdvancedDataGridColumn('label');
			datagridColumn.headerText = 'Номенклатура';
			datagridColumn.minWidth = 100;
			datagridColumn.width = 100;
			cols.push(datagridColumn);
			
			datagridColumn = new AdvancedDataGridColumn('sum');
			datagridColumn.headerText = 'Сума';
			datagridColumn.minWidth = 75;
			datagridColumn.width = 75;
			datagridColumn.setStyle("textAlign", "right");
			cols.push(datagridColumn);
			
			if ((currDateIndex >= 0) && (currDateIndexTo >= 0) && (currDateIndex != currDateIndexTo)) {
				for (var i:int = currDateIndex; i <= currDateIndexTo; i++){
					datagridColumn = new AdvancedDataGridColumn(monthFormatterExport.format(getDate(arr_months[i])));
					datagridColumn.minWidth = 85;
					//datagridColumn.width = 85;
					datagridColumn.headerText = monthFormatter.format(getDate(arr_months[i]));
					datagridColumn.setStyle("textAlign", "right");
					
					datagridColumn.itemRenderer = new ClassFactory(mytest);
					(datagridColumn.itemRenderer as ClassFactory).properties = {prefix: prefix};
					
					cols.push(datagridColumn);
				}
				adg.lockedColumnCount = 2;
			}

			adg.columns = cols;
			adg.horizontalScrollPolicy = "off";
			
			adg.invalidateList();
			//adg.optimizeDataGrid(10, 0);
			
			onTreeChange(adg, want_expand);
		}

		// itemRenderer="TreeNodeRenderer"
	]]>
</mx:Script>

<mx:Style>
.htmlLink {
}

.htmlLinkHover {
	/*font-size: 12;
	skin: ClassReference(null);
	*/
}
</mx:Style>

	<mx:DateFormatter id="monthFormatter" formatString="MMM YYYY г." />
	<mx:DateFormatter id="monthFormatterExport" formatString="YYYY-MM" />
	<mx:DateFormatter id="monthFormatterBG" formatString="DD.MM.YYYY" />
	
	<mx:GroupingCollection id="rowsGroupByFirm" source="{firm_regions}">
    	<mx:grouping>
    		<mx:Grouping>
    			<mx:GroupingField name="fcode" numeric="true" compareFunction="positionCompareFunction"/> 
    		</mx:Grouping>
    	</mx:grouping>
    </mx:GroupingCollection>
	
	<mx:Canvas left="1" right="1" y="0" width="100%" height="30" cornerRadius="6" backgroundColor="#617cb3" borderStyle="solid">
		<mx:Label id="window_title" fontSize="15" verticalCenter="0" left="5" color="#FFFFFF" fontWeight="bold"  text="Събираемост за месеца"/>
	</mx:Canvas>
	
	<mx:Canvas height="30" left="10" right="84" top="40">
	<mx:Label text="Фирма:" verticalCenter="0" left="10"/>
		<mx:ComboBox id="cbFirms" width="171" dataProvider="{rowsGroupByFirm}" labelFunction="{firm}" verticalCenter="0" left="59"/>
		<mx:Label text="Регион:" verticalCenter="0" left="266"/>
		<mx:ComboBox id="cbOffices" x="318" width="204" dataProvider="{cbFirms.selectedItem.children}" labelField="region" verticalCenter="0"/>
		
		<mx:Label x="560" text="От:" verticalCenter="0" visible="{currDateIndex >= 0}"/>
		<mx:Canvas x="590" width="140" verticalCenter="0" height="22" visible="{currDateIndex >= 0}">
			<mx:Label id="lblDate" text="{getCurrentDate(currDateIndex)}" verticalCenter="0" horizontalCenter="2"/>
			<mx:LinkButton id="lbBack" width="30" left="0" icon="@Embed(source='001_23.png')"
				click="{updateCurrentDate(-1)}" verticalCenter="0" disabledIcon="@Embed(source='001_23_disabled.png')"/>
			<mx:LinkButton id="lbNext" width="30" right="0" icon="@Embed(source='001_21.png')"
				click="{updateCurrentDate(+1)}" verticalCenter="0" disabledIcon="@Embed(source='001_21_disabled.png')"/>
		</mx:Canvas>
			
		<mx:Button label="Търси" left="754" width="96" click="doSearch()" icon="@Embed(source='001_38.png')"
			 verticalCenter="0"/>
	</mx:Canvas>

	<mx:HBox top="121" horizontalAlign="center" horizontalGap="10" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" left="10" right="10" bottom="481">
	<mx:Canvas x="10" width="100%" height="25" top="121">
		<mx:Button id="btnEarExpand" selected="true" verticalCenter="0" left="0" width="25" height="25" toggle="true"
			icon="@Embed(source='tree_exp.png')"
			click="{onTreeChange(adgEarn, btnEarExpand.selected)}"/>
		<mx:Label text="Приходи:" verticalCenter="0" left="35" fontWeight="bold"/>
		<mx:Label right="2" verticalCenter="0" id="lblEarning" text="{total_earning}"/>
	</mx:Canvas>
	</mx:HBox>

	<mx:Canvas left="10" right="10" bottom="10" height="30" horizontalScrollPolicy="off">
		<mx:Button label="Експорт" right="0" click="doExport()" 
			icon="@Embed(source='excel.gif')" enabled="{currDateIndex >= 0}" verticalCenter="0"/>
	</mx:Canvas>
	<mx:Canvas height="30" left="10" top="78" right="84">
		<mx:ComboBox id="cbFilters" verticalCenter="0" left="59" width="209" 
			dataProvider="{arr_filter}" labelField="name" enabled="{arr_filter.length > 0}"/>
		<mx:Button verticalCenter="0" left="280" width="35" label="добавяне"
			icon="@Embed(source='history_add.png')"
			click="showAddFilter()"/>
		<mx:Button label="редактиране" verticalCenter="0" left="323" width="35" click="showEditFilter()"
			icon="@Embed(source='history_edit.gif')" disabledIcon="@Embed(source='history_edit_disabled.png')"
			enabled="{cbFilters.selectedItem &amp;&amp; (cbFilters.selectedItem.id > 0)}"
			alpha="{cbFilters.selectedItem &amp;&amp; (cbFilters.selectedItem.id > 0) ? 1 : 0.3}"/>
		<mx:Button label="изтриване" verticalCenter="0" left="365" width="35" click="deleteFilter()"
			icon="@Embed(source='history_delete.png')" disabledIcon="@Embed(source='history_delete_disabled.png')"
			enabled="{cbFilters.selectedItem &amp;&amp; (cbFilters.selectedItem.id > 0)}"
			alpha="{cbFilters.selectedItem &amp;&amp; (cbFilters.selectedItem.id > 0) ? 1 : 0.3}"/>
		<mx:Label text="Филтър:" verticalCenter="0" left="10"/>
		<mx:CheckBox id="chbRegionsView" x="435" label="по региони" verticalCenter="0" leading="0" textAlign="left"
			enabled="{(cbFirms.selectedIndex > 0) &amp;&amp; (cbOffices.selectedIndex &lt; 1)}"
			alpha="{(cbFirms.selectedIndex > 0) &amp;&amp; (cbOffices.selectedIndex &lt; 1) ? 1 : 0.3}"/>
		
		<mx:Label x="560" text="До:" verticalCenter="0" visible="{currDateIndexTo >= 0}"/>
		<mx:Canvas x="590" width="140" verticalCenter="0" height="22" visible="{currDateIndexTo >= 0}">
			<mx:Label id="lblDateTo" text="{getCurrentDateTo(currDateIndexTo)}" verticalCenter="0" horizontalCenter="2"/>
			<mx:LinkButton id="lbBackTo" width="30" left="0" icon="@Embed(source='001_23.png')"
				click="{updateCurrentDateTo(-1)}" verticalCenter="0" disabledIcon="@Embed(source='001_23_disabled.png')"/>
			<mx:LinkButton id="lbNextTo" width="30" right="0" icon="@Embed(source='001_21.png')"
				click="{updateCurrentDateTo(+1)}" verticalCenter="0" disabledIcon="@Embed(source='001_21_disabled.png')"/>
		</mx:Canvas>
	</mx:Canvas>
	<mx:HBox right="10" top="150" bottom="48" horizontalAlign="center" verticalAlign="middle" left="10" horizontalGap="10" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
		<local:AutoResizableADG id="adgEarn" width="100%"
			designViewDataType="tree"
			allowMultipleSelection="false" showHeaders="true" sortableColumns="false" selectionMode="singleRow"
			displayItemsExpanded="true" displayDisclosureIcon="true"
			allowDragSelection="false" dragEnabled="false" draggableColumns="false"
			verticalGridLines="true" horizontalScrollPolicy="on" sortExpertMode="true" selectable="false" height="100%">
			
			<local:dataProvider>
			       <mx:HierarchicalData source="{arr_earnings}" childrenField="children"/>
			</local:dataProvider>
			   
			<local:rendererProviders>
				<mx:AdvancedDataGridRendererProvider columnIndex="0" columnSpan="1" renderer="TreeItemWithTotals"/>

				<mx:AdvancedDataGridRendererProvider columnIndex="1" columnSpan="1">
				<mx:renderer>
					<mx:Component>
						<mx:Canvas clipContent="false"
							backgroundColor="{data.is_total == 1 ? 0x92ffbb : 0}"
							backgroundAlpha="{data.is_total == 1 ? 1 : 0}">
						<mx:Canvas x="0" y="-2" width="100%" height="10"
							backgroundColor="{data.is_total == 1 ? 0x92ffbb : 0}"
							backgroundAlpha="{data.is_total == 1 ? 1 : 0}"/>
						<mx:LinkButton label="{data.sum}" textAlign="right" fontWeight="normal"
							color="0x000000" disabledColor="{data.hasOwnProperty('children') ? 0xFF0000 : 0x000000}"
							buttonMode="{!data.hasOwnProperty('children')}"
							textDecoration="none"
							enabled="false"
							right="0" paddingRight="0" paddingLeft="0" paddingBottom="0" paddingTop="0" cornerRadius="1"
							styleName="htmlLink"
							rollOver="this.styleName='htmlLinkHover'"
							rollOut="this.styleName=''"
							click="outerDocument.showMoneyNomenclaturesDetails(data, '111')"/>
						</mx:Canvas>
					</mx:Component>
				</mx:renderer>
				</mx:AdvancedDataGridRendererProvider>
				
<!--				<mx:AdvancedDataGridRendererProvider columnIndex="2" columnSpan="1">
				<mx:renderer>
					<mx:Component>
						<local:mytest prefix="111"/>
					</mx:Component>
				</mx:renderer>
				</mx:AdvancedDataGridRendererProvider>-->
			</local:rendererProviders>
		</local:AutoResizableADG>
	</mx:HBox>
</app:FrameworkApplication>