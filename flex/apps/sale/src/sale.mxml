<?xml version="1.0" encoding="utf-8"?>
<app:FrameworkApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:telenet="net.telepol.telenet.*" xmlns:ui="net.telepol.ui.*" xmlns:app="net.telepol.app.*"
	layout="absolute" width="800" height="550" styleName="telenet"
	clipContent="true" verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	initialize="init()"
	applicationComplete="load()">
	<app:states>
		<mx:State name="izgledEdinichen">
			<mx:RemoveChild target="{grid}"/>
			<mx:AddChild relativeTo="{grid_holder}" position="lastChild">
				<mx:DataGrid left="2" right="2" bottom="2" top="2" styleName="grid" dataProvider="{single_row}"
					selectable="false" draggableColumns="false" sortableColumns="false" editable="true">
					<mx:columns>
						<mx:DataGridColumn headerText="№" width="22" resizable="false" dataField="row" textAlign="center" editable="false"/>
						<mx:DataGridColumn headerText="Услуга" editorDataField="value"
							labelFunction="{
								function (r:Object,gc:DataGridColumn):String {return r.service_name}
							}">
							<mx:itemEditor>
								<mx:Component className="uslugaEditor">
								<mx:Canvas width="100%" horizontalScrollPolicy="off">
									<mx:Script>
			                        	<![CDATA[
			                        		public function get value():String {
			                        			data.service_name = edUsluga.text;
			                        			return edUsluga.text;
			                        		}
			                        		override public function set data(value:Object):void {
			                        			super.data = value;
			                        			edUsluga.text = data.service_name;
			                        			edUsluga.setFocus();
			                        			edUsluga.setSelection(0,100);
			                        		}
			                        	]]>
			                        </mx:Script>
									<mx:TextInput id="edUsluga" width="100%" maxChars="50"/>
								</mx:Canvas>
								</mx:Component>
							</mx:itemEditor>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="Количество" width="90" textAlign="right" editable="false"
							labelFunction="{
								function (r:Object,gc:DataGridColumn):String {return r.quantity.toString() + ' бр.'}
							}"/>
						<mx:DataGridColumn headerText="Ед. цена" width="100" textAlign="right" editable="false"
							labelFunction="{
								function (r:Object,gc:DataGridColumn):String {return currencyFormater.format(r.single_price)}
							}"/>
						<mx:DataGridColumn headerText="Сума" width="100" textAlign="right" editable="false"
							labelFunction="{
								function (r:Object,gc:DataGridColumn):String {
									return currencyFormater.format(r.total_sum);
								}
							}"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
		</mx:State>
	</app:states>
<mx:Style source="../main.css" />

<mx:Style>
	Alert {
		cornerRadius: 5;
		headerHeight: 22;
   		headerColors: #8faecb, #7998B6;
   		creationCompleteEffect: alertCreationCompleteEffect;
	}
</mx:Style>

<mx:Script>
<![CDATA[
	import mx.controls.Alert;
	import mx.events.ItemClickEvent;
	import mx.managers.PopUpManager;
	import mx.controls.Alert;
	import mx.collections.ArrayCollection;
	import mx.utils.ObjectUtil;
	import mx.effects.Glow;
	import mx.binding.utils.BindingUtils;
	import mx.messaging.config.ServerConfig;
	import mx.collections.ArrayCollection;
	import mx.collections.SortField;
	import mx.collections.Sort;
	import net.telepol.rpc.FlexVar;
	import flash.utils.getDefinitionByName;
	import mx.utils.ObjectProxy;
	import mx.events.CollectionEvent;
	import mx.binding.utils.BindingUtils;
	import mx.collections.ArrayCollection;
	import mx.events.ListEvent;
	import mx.events.DataGridEvent;
	import mx.controls.Text;
	import mx.core.Application;
	import mx.events.CloseEvent;
	import mx.effects.SetPropertyAction;
	import mx.effects.Resize;
	import mx.utils.ColorUtil;
	import flash.sampler.NewObjectSample;
	import mx.utils.ObjectUtil;
	import mx.formatters.DateBase;
	import mx.events.DropdownEvent;
	import mx.effects.easing.Elastic;
	
	private var first_response:Boolean = true;
	
	[Bindable] public var arr_clients:ArrayCollection;
	[Bindable] public var arr_object:ArrayCollection;
	[Bindable] public var arr_document:ArrayCollection;
	[Bindable] public var arrObjStatus:ArrayCollection;
	
	// za combo-to sys smetki v Order-a
 	[Bindable] public var arr_smetki:Array;
 	[Bindable] public var arr_smetki_orders:Array;
 	[Bindable] public var firm_regions:ArrayCollection = new ArrayCollection();
 	
 	[Bindable] public var arr_services:ArrayCollection;

	[Bindable] public var arr_doc_view:Array = [
		{id:"single", label:'Единичен'},
		{id:"by_services", label:'По услуги'},
		{id:"by_objects", label:'По обекти'},
		{id:"detail", label:'Подробен'}
	];
	// firmite za combobox-a
 	[Bindable] public var arr_dostavchici:ArrayCollection;
	[Bindable] public var aData:Object;
	
	[Bindable] public var single_row:ObjectProxy = new ObjectProxy(
		{
			row:1,
			id:1,
    		service_name:"yслуга",
    		single_price:0,
    		quantity:1,
    		total_sum:0
		}
	);

	[Bindable] public var client_info:Object = null;

	[Bindable] public var arr_rows:ArrayCollection = new ArrayCollection;
	[Bindable] public var arr_rows_service:ArrayCollection = new ArrayCollection;
	[Bindable] public var arr_rows_object:ArrayCollection = new ArrayCollection;
	
	// redovete na orderite
 	[Bindable] public var arr_orders:ArrayCollection;

	[Embed(source="history.gif")] [Bindable] public var imgHistory:Class;
	[Embed(source="history_edit.gif")] [Bindable] public var imgHistoryEdit:Class;
	[Embed(source="add.png")] [Bindable] private var imgAddBigClass:Class;
	[Embed(source="Arrow_Up_32.png")] [Bindable] private var imgArrowUpClass:Class;
	[Embed(source="Arrow_Down_32.png")] [Bindable] private var imgArrowDownClass:Class;
	[Embed(source="inner.png")] [Bindable] public var imgInnerCheckboxClass:Class;

	[Bindable] private var mnameslong:Array = ['Януари','Февруари','Март','Април','Май','Юни','Юли','Август','Септември','Октомври','Ноември','Декември'];
	[Bindable] private var dnamesshort:Array = ['Нд.','Пн.','Вт.','Ср.','Чт.','Пт.','Сб.'];
	[Bindable] private var mnamesshort:Array = ['Яну','Фев','Март','Апр','Май','Юни','Юли','Авг','Септ','Окт','Ноем','Дек'];
	
	public const diff:Number = 0xFFbaba;
	
	[Bindable] public var currClientID:int = 0;
	
	[Bindable] public var save_status:Boolean = false;
	
	[Bindable] public var currDate:Date = null;
	private function getCurrentDate(currDate:Date):String {
		return monthFormatter.format(currDate);
	}
	
	private function init():void {
		amfService.addEventListener("onResponse", onResponse);
		amfService.addEventListener("onFault", onFault);
		arr_rows.addEventListener(CollectionEvent.COLLECTION_CHANGE, calculate);
		
		DateBase.monthNamesShort = mnamesshort;
		DateBase.monthNamesLong = mnameslong;
		currDate = new Date();
		calculate(null);
		firm_regions.filterFunction = filterByJurName;
	}

	private function load():void {
		if (HTML_params.hasOwnProperty('id_object')){
			amfService.init(
				new FlexVar('id_object', HTML_params['id_object']),
				false
			);
			return;
		}

		doc_num.visible = HTML_params.hasOwnProperty('from_book');
		lblDocNum.visible = ! doc_num.visible;

		if (getDocId() != '')
			amfService.init(
				new FlexVar('id', aData.id),
				false
			);
		else if (HTML_params.hasOwnProperty('id')) {
				amfService.init(new FlexVar('id', HTML_params['id']), false);
			} else
				amfService.init(new FlexVar('id', "0"), false);
	}
	
	private function getDocId():String {
		if (aData != null && aData.hasOwnProperty('id'))
			return aData.id;
		else
			return '';
	}
	private function isDocIdValid():Boolean {
		return (getDocId() != '') && (aData.id > 0);
	}

	[Bindable] private var isHaveOrders:Boolean = false;
	private function haveOrders():Boolean {
		return (arr_orders != null) && (arr_orders.length > 0);
	}
	
	public var want_init:Boolean = true;

	private function onFault(e:Event):void {
		save_status = false;
	}

	private function onResponse(e:Event):void {
		if (suggesting){
			suggesting = false;
			return;
		}
		
		bOrderRight = getOrderRight();
		bDocRight = getDocRight();
		bSale_doc_editRight = getSale_doc_editRight();
		isHaveOrders = haveOrders();
		
		cbPoluchatel.enabled = false;
		if (doAccessLevel(aData) == 'new'){
			cbPoluchatel.enabled = true;
			setDefaultDeliver();
			if ((arr_rows.length == 0) || (! arr_rows[arr_rows.length-1].addRow))
				doAddRow();
		} else {
			if (first_response){
				showView(aData.view_type);
				single_row.service_name = aData.single_view_name;
				if ((aData.doc_type == 'kreditno izvestie') || (aData.doc_type == 'debitno izvestie')){
					if ((arr_rows.length == 0) || (! arr_rows[arr_rows.length-1].addRow))
						doAddRow();
				}
			}
		}
			
		showNepogaseniFakturi((aData != null) && (aData.unpaid_docs != null) && (aData.unpaid_docs.length > 0));
		showPlashtane((aData != null) && (aData.paid_type == 'cash'));
		showPechatAnulirane();
		if ((aData != null) && (aData.client_id > 0)){
			currClientID = aData.client_id;
		}
		imgNote.visible = (note.text != '');
		imgNote.toolTip = imgNote.visible ? note.text : '';
		imgNote.buttonMode = imgNote.visible;
		
		lblDocNum.setStyle('color', isDocCanceled() ? "red" : 0);
		lblDocAnn.visible = isDocCanceled();
		kvitanciq.visible = ! isDocKI_DI();
		faktura.visible = ! isDocKI_DI();
		oprostena.visible = ! isDocKI_DI();
		DocKI_DI.visible = isDocKI_DI();
		
		haveAdviceCanvas.visible = isDocHaveKI_DI();
			
		if (want_init){
			want_init = false;
			if (client_info == null){
				client_name.text = aData.client_name;
				client_address.text = aData.client_address;
				client_ein.text = aData.client_ein;
				client_ein_dds.text = aData.client_ein_dds;
				client_mol.text = aData.client_mol;
			} else {
				currClientID = client_info.client_id;
				client_name.text = client_info.client_name;
				client_address.text = client_info.client_address;
				client_ein.text = client_info.client_ein;
				client_ein_dds.text = client_info.client_ein_dds;
				client_mol.text = client_info.client_mol;
				aData.invoice_payment = client_info.invoice_payment;
				lblInvoicePayment.text = 'Клиента предпочита: '+ invoicePaymentToString(aData.invoice_payment);
				aData.client_recipient = client_info.client_recipient;
				client_recipient.text = aData.client_recipient;
				client_info = null;
			}
		}
		
		showZadylzeniaDostavchik();
		
		calculate(null);
		doAddRowNumber();

		//fillGroupByServices();
		//fillGroupByObjects();
		if (cbView.selectedItem.id == 'by_services'){
			fillGroupByServices();
		} else if (cbView.selectedItem.id == 'by_objects'){
			fillGroupByObjects();
		}
		
		setDefaultCash();
		setBankAccount();
		
		callLater(colorDocType);

		if (save_status){
			save_status = false;
			if (! isDocIdValid())
				return;
			Alert.yesLabel = "Да";
			Alert.noLabel = "Не";
			Alert.show("Желаете ли печатане ?", "Печат", Alert.YES | Alert.NO, null,
				function (e:CloseEvent):void {
					if (e.detail == Alert.YES){
						doPrint();
					}
					//if (cash.selected){
						hidePanel();
						var regEx:RegExp = new RegExp('[,$]', 'g');;
						eOrderSum.text = lblDylzimaSuma.text.replace(regEx,"");
						if (eOrderSum.visible)
							eOrderSum.setFocus();
					//}
				},
				null, Alert.YES
			);
		}
		
		first_response = false;
		
		if (isDocIdValid())
			doc_num.visible = false;
		else
			doc_num.visible = HTML_params.hasOwnProperty('from_book');
		lblDocNum.visible = ! doc_num.visible;

		if (call_makeOrder){
			call_makeOrder = false;
			//ExternalInterface.call( 'if( window.opener.refreshForm )window.opener.refreshForm( window )', '' );
			ExternalInterface.call( 'window.opener.refreshForm( window )', '' );
		}
	}
	
	private function isDocCanceled():Boolean {
		if (
			(aData != null) && (aData.hasOwnProperty('doc_status')) && (aData.doc_status == 'canceled')
		)	return true
		else
			return false;
	}
	private function isDocKI_DI():Boolean {
		if (
			(aData != null) && ((aData.doc_type == 'kreditno izvestie') || (aData.doc_type == 'debitno izvestie'))
		)	return true
		else
			return false;
	}
	private function isDocHaveKI_DI():Boolean {
		if (
			(aData != null) && (aData.is_advice == '1')
		)	return true
		else
			return false;
	}

	private function setBankAccount():void {
		if ((aData != null) && (arr_smetki != null) &&
			(aData.hasOwnProperty('id_bank_account')) &&
			(aData.hasOwnProperty('paid_type'))
		){
			if ((aData.paid_type == 'bank') || (bank.selected)){
				var id_bank_account:int = aData.id_bank_account;
				for (var i:int=0; i < arr_smetki.length; i++){
					if (arr_smetki[i].id == id_bank_account){
						cbSmetka.selectedIndex = i;
						return;
					}
				}
			}
		}
	}

	private function setDefaultCash():void {
		if (aData != null){
			if (arr_smetki_orders != null){
				var id_cash_default:int = aData.id_cash_default;
				for (var i:int=0; i < arr_smetki_orders.length; i++){
					if (arr_smetki_orders[i].id == id_cash_default){
						cbSmetkaOrder.selectedIndex = i;
						return;
					}
				}
			}
		}
	}
	private function setDefaultDeliver():void {
		if (! first_response)
			return;
			
		if (aData != null){
			if (arr_dostavchici != null){
				var ein_deliver_default:int = aData.deliverer_ein;
				for (var i:int=0; i < arr_dostavchici.length; i++){
					if (arr_dostavchici[i].idn == ein_deliver_default){
						cbPoluchatel.selectedIndex = i;
						return;
					}
				}
			}
		}
	}

	private function fillGroupByObjects(): void {
		arr_rows_object.removeAll();
		rowsGroupByObject.refresh();
		var root:Object = rowsGroupByObject.getRoot();
		var l:int = root.length;
		for (var i:int=0; i < l; i++){
			var child:Object = root.getItemAt(i);
			var cc:ArrayCollection = child.children;
			//var ec:Number = 0;
			var total_sum:Number = 0;
			var total_sum_checked:Number = 0;
			var items_checked:uint = 0;
			var items_unchecked:uint = 0;
			for (var cr:int=0; cr < cc.length; cr++){
				if (!cc[cr].addRow){
					total_sum += cc[cr].total_sum;
					
					if (cc[cr].for_payment)
						items_checked++;
					else
						items_unchecked++;
				}

				if ((cc[cr].for_payment || cc[cr].id > 0) && !cc[cr].addRow){
					//ec += cc[cr].single_price;
					total_sum_checked += cc[cr].total_sum;
				}
			}
			
			if (!cc[0].addRow){
				var o:Object = {
					row:i+1,
					id:cc[0].id,
					month: new Date,
					id_object: cc[0].id_object,
					object_name: cc[0].object_name,
					id_service: 0,
		    		service_name: "",
		    		single_price: (items_checked == 0) ? total_sum : total_sum_checked,
		    		quantity: 1,
		    		total_sum: (items_checked == 0) ? total_sum : total_sum_checked,
		    		payed:false,
		    		type: cc[0].type,		// ?
		    		id_office:0,
		    		for_payment:(items_checked != 0),//(items_checked >= items_unchecked),
		    		addRow:false,
		    		half_checked:((items_checked != 0) && (items_unchecked != 0))
				};
				arr_rows_object.addItem(o);
			}
		}
	}
	private function fillGroupByServices(): void {
		arr_rows_service.removeAll();
		rowsGroupByService.refresh();
		var root:Object = rowsGroupByService.getRoot();
		var l:int = root.length;
		for (var i:int=0; i < l; i++){
			var child:Object = root.getItemAt(i);
			var cc:ArrayCollection = child.children;
			//var ec:Number = 0;
			var total_sum:Number = 0;
			var total_sum_checked:Number = 0;
			var items_checked:uint = 0;
			var items_unchecked:uint = 0;
			var serv_by_obj:Object = new Object();
			var max_date:String = '';
			for (var cr:int=0; cr < cc.length; cr++){
				if (!cc[cr].addRow){
					total_sum += cc[cr].total_sum;

					if (cc[cr].for_payment)
						items_checked++;
					else
						items_unchecked++;
				}
				if ((cc[cr].for_payment || cc[cr].id > 0) && !cc[cr].addRow){
					//ec += cc[cr].single_price;
					total_sum_checked += cc[cr].total_sum;
					
					if ((cc[cr].type == 'month') && (! isDocIdValid())){
						if (! serv_by_obj.hasOwnProperty(cc[cr].id_object)){
							serv_by_obj[cc[cr].id_object] = cc[cr].month;
							max_date = cc[cr].month;
						}
						else {
							if (cc[cr].month > serv_by_obj[cc[cr].id_object]){
								serv_by_obj[cc[cr].id_object] = cc[cr].month;
								max_date = cc[cr].month;
							}
						}
					}
				}
			}
			
			var bWantMonth:Boolean = true;
			if (max_date != ''){
				for (var mnth:String in serv_by_obj) {
					bWantMonth = bWantMonth && (serv_by_obj[mnth].substr(0,7) == max_date.substr(0,7));
				}
			} else {
				bWantMonth = false;
			}
			var service_month:String = bWantMonth ? ' за м. ' + monthFormatterLong.format(getDate(max_date)) : '';
			
			if (!cc[0].addRow){
				var o:Object = {
					row:i+1,
					id:cc[0].id,
					month: new Date,
					id_object:0,
					object_name:"",
					id_service: cc[0].id_service,		// ?
		    		service_name: cc[0].service_name + service_month,	// ?
		    		single_price: (items_checked == 0) ? total_sum : total_sum_checked,
		    		quantity: 1,
		    		total_sum: (items_checked == 0) ? total_sum : total_sum_checked,
		    		payed:false,
		    		type: cc[0].type,		// ?
		    		id_office:0,
		    		for_payment:(items_checked != 0),//(items_checked >= items_unchecked),
		    		addRow:false,
		    		half_checked:((items_checked != 0) && (items_unchecked != 0))
				};
				arr_rows_service.addItem(o);
			}
		}
	}

	public function doAccessLevel(data:Object):String {
		if (aData != null && aData.hasOwnProperty('id')){
			if (aData.id > 0){
				return 'modify';
			}
		}
		return 'new';
	}
	private function doAddRowNumber():void {
		if (arr_rows != null){
			var l:int = arr_rows.length;
			for (var i:int = 0; i < l; i++){
				arr_rows[i].row = i+1;
				//if (!arr_rows[i].hasOwnProperty('for_payment'))
				if (isDocIdValid())
					arr_rows[i].for_payment = false;
				else
					arr_rows[i].for_payment = true;
			}
		}
	}
	private function calculate(e:CollectionEvent):void {
		if (aData == null)
			return;

		var sum:Number = 0;
		var dds:Number = 0;
		var payed:Number = aData.paid_sum;
		if (isNaN(payed))
			payed = 0;

		if (arr_rows != null){
			var l:int = arr_rows.length;
			for (var i:int = 0; i < l; i++){
				if ((arr_rows[i].for_payment || arr_rows[i].id > 0) && !arr_rows[i].addRow){
					sum += (arr_rows[i].single_price * arr_rows[i].quantity);
				}
			}
		}
		dds = oprostena.selected ? 0 : sum * 0.2;
		
		lblSum.text = numberFormatter.format(sum);
		lblDDS.text = numberFormatter.format(dds);
		lblTotal.text = numberFormatter.format(sum + dds);
		
		lblPayedSum.text = numberFormatter.format(payed);
		lblDylzimaSuma.text = numberFormatter.format((sum + dds) - (payed)); // TotalSum - PaiedSum
		
		var regEx:RegExp = /[,$]/g;
		eOrderSum.text = lblDylzimaSuma.text.replace(regEx,"");
		
		// edinichen izgled
		single_row.single_price = sum;
    	single_row.total_sum = sum;
    	
    	label4.visible = isViewVisible(aData, arr_rows);
    	cbView.visible = isViewVisible(aData, arr_rows);
	}

	private function getDuty(client_id:int, client_ein:String):void {
		if ((currClientID > 0) && (cbPoluchatel.selectedIndex >= 0)){
			amfService.getDuty(
				new FlexVar('client_id', client_id),
				new FlexVar('client_ein', client_ein),
				new FlexVar('month_duty', mysqlDateFormatter.format(currDate)),
				new FlexVar('deliverer_ein', cbPoluchatel.selectedItem.idn),
				new FlexVar('deliverer_name', cbPoluchatel.selectedItem.name),
				false
			);
		}
	}

	private function doAddRow():void {
		if (! bSale_doc_editRight){
			if ((aData.doc_type == 'kreditno izvestie') || (aData.doc_type == 'debitno izvestie')){
			} else
				return;
		}

		var o:Object = {
			row:arr_rows.length,
			id:0,
			month: new Date,
			id_object:0,
			object_name:"",
			id_service:0,
    		service_name:"",
    		single_price:0,
    		quantity:0,
    		total_sum:0,
    		for_payment:true,
    		addRow:true
			};
		arr_rows.addItem(o);
	}
	private function doAddFreeSale(sp:Number, q:int, ts:Number, d:Date, service_id:int, service_name:String,office_id:int):void {
		var o:Object = {
			row:arr_rows.length,
			id:0,
			month: d,
			id_object:0,
			object_name:"свободна продажба",
			id_service:service_id,
    		service_name:service_name,
    		single_price:sp,
    		quantity:q,
    		total_sum:ts,
    		payed:false,
    		type:'free',
    		id_office:office_id,
    		for_payment:true,
    		addRow:false
			};
		arr_rows.addItemAt(o, arr_rows.length-1);
	}

	private function validateDoc():Boolean {
		var result:Boolean = true;
		if (bank.selected && cbSmetka.selectedIndex < 0){
			result = false;
			cbSmetka.setFocus();
			Alert.show('Не е избрана банкова сметка !');
		}
		return result;
	}
	
	private function sendSaveToServer():void {
		save_status = true;
		if (HTML_params.hasOwnProperty('from_book')){
			// фактура от кочан
			amfService.save(
				new FlexVar('arr_rows', ObjectUtil.copy(arr_rows.source)),
				new FlexVar('single_row', single_row.valueOf()),
				new FlexVar('client_id', currClientID),
				new FlexVar('from_book', true),
				true);
		} else {
			amfService.save(
				new FlexVar('arr_rows', ObjectUtil.copy(arr_rows.source)),
				new FlexVar('single_row', single_row.valueOf()),
				new FlexVar('client_id', currClientID),
				true);
		}
	}

	private function doSave():void {
		if (! validateDoc())
			return;

		if (isHaveActiveOrder()){
			Alert.yesLabel = "Да";
			Alert.noLabel = "Не";
			Alert.show("По документа има плащания и ще бъдат пуснати насрещни ордери. Искате ли да продължите ?", "Въпрос", Alert.YES | Alert.NO, null,
				function (e:CloseEvent):void {
					if (e.detail == Alert.YES){
						sendSaveToServer();
					}
				},
				null, Alert.NO);
		} else {
			sendSaveToServer();
		}
	}
	
	private function isHaveActiveOrder():Boolean {
		if (arr_orders && (arr_orders.length > 0)){
			for (var i:int=0; i < arr_orders.length; i++){
				if (arr_orders[i].order_status == 'active')
					return true;
			}
		}
		return false;
	}

	private function dateField_openClose(evt:DropdownEvent):void {
		//doc_date.data = evt.type;
	}
	private function getDate(d:String):Date {
		return new Date(
			int(d.substr(0,4)), 	// year
			int(d.substr(5,2))-1,	// month
			int(d.substr(8,2))		// day
		);
	}
	private function onDateKeyDown(e:KeyboardEvent):void {
	}
	private function onNumberKeyDown(e:Event):void {
		var edit:TextInput = (e.currentTarget as TextInput);
		var num:int = int(edit.text);
	}
	
	private var hideDDSeffect:Resize;
	private function hideShowDDS():void {
		if (hideDDSeffect == null) {
			hideDDSeffect = new Resize(dds_holder);
			hideDDSeffect.duration = 300;
		}
		//<mx:Fade targets="{[lblDDS, lblDDSlbl, lblDDSlv]}" alphaFrom="1.0" alphaTo="0.0" duration="1000" />
		if (lblDDSlbl.visible != !oprostena.selected){
			var delay:int = 0;
			if (!oprostena.selected)
				delay = 300;
			setTimeout(function ():void {
						lblDDSlbl.visible = !oprostena.selected;
						lblDDS.visible = lblDDSlbl.visible;
						lblDDSlv.visible = lblDDSlbl.visible;
						}
						, delay);
		
			if (!hideDDSeffect.isPlaying) {
				hideDDSeffect.heightTo = oprostena.selected ? 56 : 78;
				hideDDSeffect.play();
			} else {
				hideDDSeffect.reverse();
			}
		}
		
		calculate(null);
		
		colorDocType();
	}
	
	private function colorDocType():void {
		doc_type_holder.setStyle('backgroundColor', faktura.selected ? 0xfbec9a : '');
		doc_type_holder_1.setStyle('backgroundColor', faktura.selected ? 0xfbec9a : 0xF2F2F2);
	}
	
	private var selectRegion:SelectRegion = null;
	public function showSelectRegion(o:Object):void {
		selectRegion = PopUpManager.createPopUp(this, SelectRegion, true) as SelectRegion;
		selectRegion.firm_regions = firm_regions;
		//TODO: да се добави ново право на редакция на единичната цена и количеството
		try {
			selectRegion.res_fcode = o.firm_region.fcode;
			selectRegion.res_rcode = o.firm_region.rcode;
		} catch (e:Error) {
			selectRegion.res_fcode = -1;
			selectRegion.res_rcode = -1;
		}
		
		PopUpManager.centerPopUp(selectRegion);
		selectRegion.addEventListener(Event.CLOSE,
			function onClose():void {
				if (! selectRegion.cancel_operation){
					if (o.firm_region == null)
						o.firm_region = {};
					o.firm_region.fcode = selectRegion.res_fcode;
					o.firm_region.firm = selectRegion.res_firm;
					o.firm_region.rcode = selectRegion.res_rcode;
					o.firm_region.region = selectRegion.res_region;
					if ((o != null) && (o.type == 'single') && (o.id_duty > 0) && (o.firm_region != null) && (o.firm_region.rcode > 0)){
						amfService.updateSingle(
							new FlexVar('id_duty', o.id_duty),
							new FlexVar('rcode', o.firm_region.rcode),
							false
						);
					}
				}
			}
		);
	}
	
	private var searchPanel:Search = null;
	private function showSearch():void {
		//if (searchPanel == null)
		searchPanel = PopUpManager.createPopUp(this, Search, true) as Search;
		searchPanel.arrObjStatus = arrObjStatus;
		//searchPanel.x = btnSearch.x + btnSearch.width + 1;
		searchPanel.x = Math.min( btnSearch.x , (Application.application.width - searchPanel.width) / 2);
		//searchPanel.y = Math.max(0, (btnSearch.y + btnSearch.height / 2) - (searchPanel.height / 2));
		searchPanel.y = btnSearch.y + btnSearch.height;
		//PopUpManager.bringToFront(searchPanel);
	}
	
	private var returnsum:ReturnSum = null;
	private var call_makeOrder:Boolean = false;
	public function showReturnSum():void {
		returnsum = PopUpManager.createPopUp(this, ReturnSum, true) as ReturnSum;
		returnsum.Price = eOrderSum.text;
		PopUpManager.centerPopUp(returnsum);
		returnsum.addEventListener(Event.CLOSE,
			function onClose():void {
				if (! returnsum.cancel_operation){
					call_makeOrder = true;
					amfService.makeOrder();
				}
			}
		);
	}

	private function filterByJurName(o:Object):Boolean {
		if (cbPoluchatel.selectedItem == null)
			return false;
		return o.jur_name == cbPoluchatel.selectedItem.name;
	}

	private var freeSale:FreeSale = null;
	public function showFreeSale(editMode:Boolean, obj:Object = null):void {
		freeSale = PopUpManager.createPopUp(this, FreeSale, true) as FreeSale;

		freeSale.firm_regions = firm_regions;
        freeSale.arr_services = arr_services;
        freeSale.editMode = editMode;
        if (editMode){
        	if (obj.month is Date)
        		freeSale.currDate = obj.month;
        	else
        		freeSale.currDate = getDate(obj.month);
        	freeSale.service_id = obj.id_service;
        	freeSale.service_name = obj.service_name;
        	//freeSale.office_id = obj.id_object;
        	freeSale.SinglePrice = obj.single_price;
        }
		PopUpManager.centerPopUp(freeSale);
		freeSale.addEventListener(Event.CLOSE,
			function onClose():void {
				if (freeSale.closeAndAdd){
					if (! freeSale.editMode){
						doAddFreeSale(
							freeSale.SinglePrice,
							freeSale.nsKolich.value,
							freeSale.getTotalSum(),
							freeSale.currDate,
							freeSale.service_id,
							freeSale.service_name,
							freeSale.office_id
						);
					} else {
    					obj.single_price = freeSale.SinglePrice;
    					obj.quantity = freeSale.nsKolich.value;
    					obj.total_sum = freeSale.getTotalSum();
    					obj.month = freeSale.currDate;
    					obj.id_service = freeSale.service_id;
    					obj.service_name = freeSale.service_name;
    					obj.id_office = freeSale.office_id;

						arr_rows.itemUpdated(obj);
						arr_rows.refresh();
					}
				}
			}
		);
	}
	
	private var order_canvas_y:int = 370;
	private function hidePanel(): void {
		if (myMove.isPlaying)
			return;
		myMove.stop();
		myMove.yFrom = myMove.target.y;
        myMove.yTo = (myMove.target.y < 543) ? 543 : order_canvas_y;

        //if (myMove.target.y <= 610){
        	myMove.startDelay = 0;
        //} else {
        //	myMove.startDelay = 0;
        //}
        
        myMove.play();
	}
	private function moveEnd():void {
		if (order_holder.y == 543){
			btnOpenOrder.source = imgArrowUpClass;
			btnOpenOrder.toolTip = "Отвори информация за ордер";
		} else {
			btnOpenOrder.source = imgArrowDownClass;
			btnOpenOrder.toolTip = "Затвори информация за ордер"
			if (eOrderSum.visible)
				eOrderSum.setFocus();
		}
	}
	private function test():void {
		//grid.editedItemPosition = {columnIndex:1, rowIndex:0};
		(grid.columns[6] as DataGridColumn).width = 100;
		(grid.columns[7] as DataGridColumn).width = 100;
		//trace(grid.columnCount);
	}
	private function doChangeView():void {
		fillGroupByServices();
		fillGroupByObjects();
		if (cbView.selectedItem.id == 'single')
			currentState = 'izgledEdinichen';
		else {
			if (cbView.selectedItem.id == 'by_services'){
				grid.dataProvider = arr_rows_service;
			} else if (cbView.selectedItem.id == 'by_objects'){
				grid.dataProvider = arr_rows_object;
			} else {
				grid.dataProvider = arr_rows;
			}
			currentState = '';
		}
	}

	private function onItemEditBeginning(e:DataGridEvent):void {
		if (e.rowIndex > arr_rows.length-1)
			return;
  		// Do not allow editing of Add Task row except for "Click to Add" column
  		var row:Object = arr_rows[e.rowIndex];
  		if (row.addRow && (e.columnIndex != 2)) {
    		e.preventDefault();
    		//var focusedCell:Object = {columnIndex:1, rowIndex:e.rowIndex};
    		//grid.editedItemPosition = focusedCell;
    		return;
    	}
    }
    private function onItemClick(e:ListEvent):void {
    	var row:Object = e.itemRenderer.data;
    	//if (row.addRow && (e.columnIndex == 2)) {
    	if (row.addRow && (e.itemRenderer is DeselectableCell)) {
    		if ((e.itemRenderer as DeselectableCell).text.substr(0,1) == '+'){
    			//Alert.show('test');
    			showFreeSale(false);
    		}
    	}
    }

	private function goClientProfile():void {
		//ExternalInterface.call('window.open', 'http://localhost/telenet/page.php?page=client_payments&amp;id=871');
		if (currClientID > 0)
			ExternalInterface.call('dialogClientPayments', currClientID);
	}
	
	private function showPechatAnulirane():void {
		btnPrint.enabled = isDocIdValid();
		btnAnulirane.enabled = isDocIdValid();
		btnDebIzv.enabled = isDocIdValid();
		btnKrIzv.enabled = isDocIdValid();
	}

	private function showNepogaseniFakturi(show:Boolean):void {
		canvas_poluchatel.setStyle('backgroundColor', show ? diff : '');
		canvas_poluchatel_l.setStyle('backgroundColor', show ? diff : 0xf2f2f2);
	}
	
	private function showZadylzeniaDostavchik():void {
		var duty_index:int = -1;
		var duty_count:int = 0;
		if (arr_dostavchici != null){
			for (var i:int = 0; i < arr_dostavchici.length; i++){
				if (arr_dostavchici[i].haveDuty){
					duty_index = i;
					duty_count += 1;
					//break;
				}
			}
		}

		cbPoluchatel.setStyle('backgroundColor', duty_count > 1 ? diff : '');
		if (duty_count == 1)
			if ((duty_index >= 0) && (cbPoluchatel.selectedIndex != duty_index)){
				cbPoluchatel.selectedIndex = duty_index;
				callLater(getDuty, [currClientID, client_ein.text]);

				//if ((searchPanel != null) && (searchPanel.last_action_flag != 0)){
				//	callLater(searchPanel.doLastCommand, []);
				//} else {
				//	cbPoluchatel.selectedIndex = duty_index;
				//	callLater(getDuty, [currClientID, client_ein.text]);
				//}
				
				//getDuty(currClientID, client_ein.text);
			}
	}
	
	private function showPlashtane(broj:Boolean):void {
		aData.paid_type = broj ? 'cash' : 'bank';
		cbSmetka.enabled= ! broj;
		cbSmetka.selectedIndex = -1;
		if (! broj)
			setBankAccount();
	}
	
	private function showView(view:String):void {
		for (var i:int = 0; i < arr_doc_view.length; i++){
			if (arr_doc_view[i].id == view){
				cbView.selectedIndex = i;
				doChangeView();
				break;
			}
		}
	}
	
	private var suggesting:Boolean = false;
	private var intervalId:uint = 0;
	private var suggest_field:String = '';
	private var suggest_value:String = '';
			
	// Client
	private function getData(e:KeyboardEvent):void {
		//trace('get data ' + e.charCode + ' ' + e.keyCode);
		clearTimeout(intervalId);

		suggest_field = e.currentTarget.labelField;
		suggest_value = e.currentTarget.currentText;
		
		if (e.currentTarget.currentText.length > 1)
			if ((e.charCode > 0) && (e.keyCode != 27) && (e.keyCode != 13)){
				intervalId = setTimeout(query, 100);
			}
	}
			
	private function query():void {
		if (suggest_field != ''){
			suggesting = true;
			(Application.application as sale).amfService.suggestClient(
				new FlexVar('field', suggest_field), new FlexVar('info', suggest_value), false
			);
		}
	}
		
	private function handleAutoCompleteChange(e:Event):void {
		var client:Object = e.currentTarget.selectedItem;
		//trace(e);
		if (client.hasOwnProperty('name')){
			currClientID = client.id;
			client_name.text = client.name;
			client_address.text = client.address;
			client_ein.text = client.invoice_ein;
			client_ein_dds.text = client.invoice_ein_dds;
			client_mol.text = client.invoice_mol;
			switch (client.invoice_layout){
				case 'single':
					cbView.selectedIndex = 0;
					break;
				case 'by_services':
					cbView.selectedIndex = 1;
					break;
				case 'by_objects':
					cbView.selectedIndex = 2;
					break;
				case 'total':
					cbView.selectedIndex = 3;
					break;
				default:
					cbView.selectedIndex = 3;
					break;
			}
			doChangeView();
			getDuty(currClientID, client.invoice_ein);
		}
	}
	/*
	private var suspendChange:int = 0;
	private function getData(e:KeyboardEvent):void {
		trace('start>'+e.currentTarget.labelField);
		trace('>'+suspendChange);
		if (suspendChange > 0){
			suspendChange -= 1;
			return;
		}
		trace('>'+e.currentTarget.currentText);
		currClientID = 0;
		if (e.currentTarget.currentText.length > 1)
			if (e.charCode > 0){
				var suggest_field:String = e.currentTarget.labelField;
				var suggest_value:String = e.currentTarget.currentText;
				trace('suggestClient>'+suggest_field + ' : '+suggest_value);
				amfService.suggestClient(new FlexVar('field', suggest_field), new FlexVar('info', suggest_value));
			}
		trace('end>'+e.currentTarget.labelField);
	}
	private function handleAutoCompleteChange(e:Event):void {
		var client:Object = e.currentTarget.selectedItem;
		trace('start>>'+e.currentTarget.labelField);
		if (client.hasOwnProperty('name')){
			suspendChange = 1;
			currClientID = client.id;
			client_name.text = client.name;
			client_address.text = client.address;
			client_ein.text = client.invoice_ein;
			client_ein_dds.text = client.invoice_ein_dds;
			client_mol.text = client.invoice_mol;
			getDuty(currClientID, client.invoice_ein);
			trace('getDuty>>');
		} else {
			trace('>>'+e.currentTarget.selectedItem);
		}
		trace('end>>'+e.currentTarget.labelField);
	}
	*/

	private function filterSmetki(item:Object):Boolean {
		var selType:String = cash.selected ? 'cash' : bank.selected ? 'bank' : '';
		return item.type == selType;
	}
	private function updateCurrentDate(delta:int):void {
		currDate['month'] = currDate['month'] + delta;
		lblDate.text = getCurrentDate(currDate);
		getDuty(currClientID, client_ein.text);
	}
	private function invoicePaymentToString(ip:String):String {
		if (ip == 'cash')
			return 'фактура в брой';
		else if (ip == 'bank')
			return 'фактура по банка';
		return 'квитанция';
	}

	private function makeOrder():void {
		var cashbank:int = isCashBank();
		if (cashbank != 0){
			var txt:String = '';
			if (cashbank == 1)
				txt = 'Документа е по банкова сметка, а плащането в брой. Сигурни ли сте ?';
			else
				txt = 'Документа е в брой, а плащането по банкова сметка. Сигурни ли сте ?';
			Alert.yesLabel = "Да";
			Alert.noLabel = "Не";
			Alert.show(txt, "Ордер", Alert.YES | Alert.NO, null,
				function (e:CloseEvent):void {
					if (e.detail == Alert.YES){
						showReturnSum();
					}
				}
			);
		} else {
			showReturnSum();
		}
	}
    
    private function isViewVisible(obj:Object, arr:ArrayCollection):Boolean {
		if (doAccessLevel(obj) == 'new') return arr.length > 1;
		return arr.length > 0;
	}
	
	private function dataGrid_columnStretch(evt:Event):void {
		for (var i:int=0; i < grid.columns.length; i++){
			if ((grid.columns[i].visible) && (grid.columns[i].hasOwnProperty('minWidth'))){
				if (grid.columns[i].width < grid.columns[i].minWidth){
					//trace(grid.columns[i].width + ' : ' + grid.columns[i].minWidth);
					grid.columns[i].width = grid.columns[i].minWidth;
				}
			}
		}
	}
	
	private function doPrint():void {
		ExternalInterface.call('dialogPdfDoc', aData.id);
	}
	
	private function doDI():void {
		first_response = true;
		amfService.debitAdvice(new FlexVar('nId', aData.id), false);
	}
	private function doKI():void {
		first_response = true;
		amfService.creditAdvice(new FlexVar('nId', aData.id), false);
	}
	
	private function doAnnulment(): void {
		amfService.annulment(new FlexVar('nId', aData.id), false);
	}
	
	private function isOrderVisible(dylzima_suma:String, doc_num:String, right:int):Boolean {
		/*((aData != null) && aData.hasOwnProperty('id') && (aData.id > 0) &&*/
		return (doc_num != 'НЕЗАПИСАН') && (dylzima_suma != '0.00') && (right > 1);
		/*)*/
	}
	
	private function isCashBank():int {
		if ((cbSmetkaOrder.selectedItem.type == 'cash') && (bank.selected))
			return 1;
		if ((cbSmetkaOrder.selectedItem.type == 'bank') && (cash.selected))
			return 2;
			
		return 0;
	}
	
	private function getDocDateLimit():Date {
		const millisecondsPerDay:int = 1000 * 60 * 60 * 24;
		var n:Date = new Date();
		n.setTime(n.getTime() - (9 * millisecondsPerDay));
		return n;
	}
	
	[Bindable] public var bDocRight:int = 1;
	private function getDocRight():int {
		//0 - hidden
		//1 - read only
		//2 - edit
		//3 - edit all

		//'sale_doc_view' => true,
        //'sale_doc_edit' => true,
        //'sale_doc_grant' => true
        var locked:Boolean = true;
		if ((aData != null) && (aData.hasOwnProperty('locked')))
			locked = aData.locked;
		
		var sale_doc_view:Boolean = false;
		var sale_doc_edit:Boolean = false;
		var sale_doc_grant:Boolean = false;
		if ((aData != null) && (aData.hasOwnProperty('sale_doc_view')))
			sale_doc_view = aData.sale_doc_view;
		if ((aData != null) && (aData.hasOwnProperty('sale_doc_edit')))
			sale_doc_edit = aData.sale_doc_edit;
		if ((aData != null) && (aData.hasOwnProperty('sale_doc_grant')))
			sale_doc_grant = aData.sale_doc_grant;

		var ret:int = 0;

		if (sale_doc_view || sale_doc_edit || sale_doc_grant)
			ret = 1;

		if ((sale_doc_edit || sale_doc_grant) && !locked)
			ret = 2;
			
		if (sale_doc_grant && !locked)
			ret = 3;
			
		return ret;
	}
	
	[Bindable] public var bSale_doc_editRight:Boolean = false;
	private function getSale_doc_editRight():Boolean {
		if ((aData != null) && (aData.hasOwnProperty('sale_doc_edit')))
			return aData.sale_doc_edit;
		else
			return false;
	}

	[Bindable] public var bOrderRight:int = 0;
	private function getOrderRight():int {
		//0 - hidden
		//1 - read only
		//2 - edit all

        //'sale_doc_order_view' => true,
        //'sale_doc_order_edit' => true

		var locked:Boolean = true;
		if ((aData != null) && (aData.hasOwnProperty('locked')))
			locked = aData.locked;

		var sale_doc_order_view:Boolean = false;
		var sale_doc_order_edit:Boolean = false;
		if ((aData != null) && (aData.hasOwnProperty('sale_doc_order_view')))
			sale_doc_order_view = aData.sale_doc_order_view;
		if ((aData != null) && (aData.hasOwnProperty('sale_doc_order_edit')))
			sale_doc_order_edit = aData.sale_doc_order_edit;

		var ret:int = 0;
		
		if (sale_doc_order_view || sale_doc_order_edit)
			ret = 1;
		if (sale_doc_order_edit)
			ret = 2;

		return ret;
	}
]]>
</mx:Script>
	<mx:GlowFilter id='glowf' blurX='9' blurY='9' alpha='1' color='#ff0000' knockout='false' quality='3'
          strength='1' inner='false'>
    </mx:GlowFilter>

	<mx:NumberFormatter id="numberFormatter" precision="2" rounding="nearest" />
	<mx:CurrencyFormatter id="currencyFormater" alignSymbol="right" currencySymbol=" лв." rounding="nearest" precision="2" />
	<mx:DateFormatter id="monthFormatter" formatString="MMM YYYY г." />
	<mx:DateFormatter id="monthFormatterLong" formatString="MMMM YYYY г."/>
	<mx:DateFormatter id="bgDateFormatter" formatString="DD.MM.YYYY г." />
	<mx:DateFormatter id="bgDateFormatter_small" formatString="DD.MM.YYYY" />
	<mx:DateFormatter id="mysqlDateFormatter" formatString="YYYY-MM-DD" />
	
	<mx:GroupingCollection id="rowsGroupByService" source="{arr_rows}">
    	<mx:grouping>
    		<mx:Grouping>
    			<mx:GroupingField name="id_service" numeric="true"/> 
    		</mx:Grouping>
    	</mx:grouping>
    </mx:GroupingCollection>
	<mx:GroupingCollection id="rowsGroupByObject" source="{arr_rows}">
    	<mx:grouping>
    		<mx:Grouping>
    			<mx:GroupingField name="id_object" numeric="true"/> 
    		</mx:Grouping>
    	</mx:grouping>
    </mx:GroupingCollection>

	<mx:Canvas width="252" height="151" styleName="holder" clipContent="false" right="10" top="10" id="canvas_dostavchik">
		<mx:Label y="13" text="За сметка на:" left="6"/>
		<mx:ComboBox y="11" width="150" id="cbPoluchatel" dataProvider="{arr_dostavchici}" labelField="title"
			fontWeight="normal" alternatingItemColors="[#ffffff, #eff1f2]" dropdownStyleName="comboBoxDropdownDOWN" right="10"
			change="{firm_regions.refresh(); getDuty(currClientID, client_ein.text)}">
			<mx:itemRenderer>
				<mx:Component>
					<mx:Canvas>
					<mx:Label left="3" right="2" top="1" text="{data.title}"
						fontWeight="{data.haveDuty ? 'bold' : 'normal'}"
						color="{0}"
						visible="{data.haveDuty}"/>
					<mx:Label left="2" right="2" text="{data.title}"
						fontWeight="{data.haveDuty ? 'bold' : 'normal'}"
						color="{data.haveDuty ? outerDocument.diff : 0}"/>
					</mx:Canvas>
				</mx:Component>
			</mx:itemRenderer>
		</mx:ComboBox>
		<mx:Label y="42" text="Име:" left="6"/>
		<mx:Label y="42" width="198" textAlign="right" text="{cbPoluchatel.selectedItem.name}" right="6"/>
		<mx:Label y="62" text="Адрес:" left="6"/>
		<mx:Label y="82" text="ИН:" left="6"/>
		<mx:Label y="102" text="ИН " left="6"/>
		<mx:Label y="103" text="по ДДС:" left="25"
			fontSize="9" fontAntiAliasType="advanced" fontSharpness="0" fontThickness="0" fontGridFitType="pixel" fontFamily="Arial"/>
		
		<mx:Label y="121" text="МОЛ:" left="6"/>
		<mx:Label y="62" width="199" textAlign="right" text="{cbPoluchatel.selectedItem.address}" right="6"/>
		<mx:Label y="82" width="177" textAlign="right" text="{cbPoluchatel.selectedItem.idn}" right="6"/>
		<mx:Label y="102" width="177" textAlign="right" text="{cbPoluchatel.selectedItem.idn_dds}" right="6"/>
		<mx:Label y="122" width="195" textAlign="right" text="{cbPoluchatel.selectedItem.jur_mol}" right="6"/>
		
		<mx:Canvas y="-9" width="73" height="17" backgroundColor="#F2F2F2" left="10">
			<mx:Label y="0" text="Доставчик" width="100%" height="100%" fontWeight="bold" x="0" textAlign="center"/>
		</mx:Canvas>
	</mx:Canvas>

	<mx:Canvas width="166" height="47" styleName="holder" id="canvas1" right="270" top="10">
		<mx:Label y="5" text="№:" left="7"/>
		<mx:TextInput id="doc_num" y="4" textAlign="center" restrict="0-9" fontWeight="bold" fontSize="11" height="20" width="108" maxChars="10" toolTip="номер на документа"
			keyDown="onNumberKeyDown(event)" text="{aData.doc_num}" right="8" visible="false"/>
		<mx:Label id="lblDocNum" y="3" text="{(aData == null) || (!aData.hasOwnProperty('doc_num')) ? 'НЕЗАПИСАН' : aData.doc_num}" width="112" textAlign="center" fontWeight="bold" fontSize="13" horizontalCenter="0" height="20"/>
		<mx:Label y="25" text="Дата издаване:" left="4"/>
		<mx:Label y="25" text="{bgDateFormatter_small.format(aData.doc_date_create)}" right="2"/>
			<!-- minYear="2000" maxYear="2010" -->
			<!-- selectableRange="{{rangeStart:new Date(2007, 11, 3), rangeEnd:new Date(2007,11,28)}}" -->
			<!-- disabledDays="{[0,6]}" -->
	</mx:Canvas>
	
	<mx:Canvas id="doc_type_holder" width="165" height="68" styleName="holder" clipContent="false" right="271" top="65">
		<mx:RadioButtonGroup id="doc_type" itemClick="{hideShowDDS()}"/>
		<mx:RadioButton id="kvitanciq" y="9" label="Квитанция данъчна" groupName="doc_type" height="18" horizontalGap="1"
			selected="{aData.doc_type == 'kvitanciq'}" useHandCursor="true" left="10"
			enabled="{kvitanciq.selected || (lblDocNum.text == 'НЕЗАПИСАН')}"/>
		<mx:RadioButton id="faktura" y="28" label="Фактура" groupName="doc_type" height="18" horizontalGap="1"
			selected="{aData.doc_type == 'faktura'}" useHandCursor="true" left="10"
			enabled="{faktura.selected || (lblDocNum.text == 'НЕЗАПИСАН')}"/>
		<mx:RadioButton id="oprostena" y="47" label="Квитанция опростена" groupName="doc_type" height="18" horizontalGap="1"
			selected="{aData.doc_type == 'oprostena'}" useHandCursor="true" left="10"
			enabled="{oprostena.selected || (lblDocNum.text == 'НЕЗАПИСАН')}"/>
			
		<mx:Canvas id="doc_type_holder_1" y="-8" width="110" height="16" backgroundColor="#F2F2F2" left="10"
			styleName="holder" borderColor="#F2F2F2">
			<mx:Label y="0" text="Вид на документа" width="100%" fontWeight="bold" x="0" textAlign="center"
				verticalCenter="0"/>
		</mx:Canvas>
		
		<mx:Canvas id="DocKI_DI" x="2" y="8" height="58" width="161"
			horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="false">
			<mx:Label x="0" y="0" fontSize="15" color="red"
				text="{aData.doc_type == 'kreditno izvestie' ? 'Кредитно известие' : 'Дебитно известие'}"
				textAlign="center" fontWeight="bold"/>
			<mx:Label x="8" y="22" text="към"/>
			<mx:LinkButton y="20" label="{aData.advice_num}" horizontalCenter="0"
				click="{ExternalInterface.call('dialogSale2', aData.id_advice)}"/>
			<mx:Label y="40" horizontalCenter="0" text="от {bgDateFormatter.format(getDate(aData.advice_date))}"/>
		</mx:Canvas>
	</mx:Canvas>
	
	<mx:Label y="142" text="Дата:" left="385"/>
	<mx:DateField id="doc_date" y="141" width="90" showToday="true" formatString="DD.MM.YYYY" styleName="picker" yearSymbol=" г." firstDayOfWeek="1" 
		yearNavigationEnabled="true" 
		dayNames="{dnamesshort}" monthNames="{mnameslong}"
		selectedDate="{getDate(aData.doc_date)}" keyDown="onDateKeyDown(event)"
		selectableRange="{{rangeStart:getDocDateLimit()}}"
		open="dateField_openClose(event)" close="dateField_openClose(event)"
		toolTip="дата на данъчното събитие" x="422" height="20"/>

	<mx:Canvas y="169" height="248" styleName="holder"  clipContent="true" id="grid_holder" right="10" left="10"
		visible="{bDocRight > 0}">
	<telenet:customDataGrid id="grid" right="2" left="2" top="2" bottom="2" styleName="grid" dataProvider="{arr_rows}"
		editable="{bDocRight > 1}"
		columnStretch="dataGrid_columnStretch(event)"
		sortableColumns="true" selectable="false" draggableColumns="false"
		itemEditBeginning="onItemEditBeginning(event)"
		itemClick="onItemClick(event)"
		updateComplete="{dataGrid_columnStretch(event)}"
		dataChange="{grid.selectedIndex = -1}">
		<telenet:columns>
			<mx:DataGridColumn headerText="" dataField="for_payment" minWidth="15" width="15" resizable="false"
				editorDataField="selected" rendererIsEditor="true" textAlign="left" sortable="false"
				editable="true">
				<mx:itemRenderer>
					<mx:Component>
						<mx:CheckBox label="" buttonMode="true" click="{updateCheck()}"
							selectedUpIcon="{data.half_checked ? this.outerDocument.imgInnerCheckboxClass : null}"
							selectedOverIcon="{data.half_checked ? this.outerDocument.imgInnerCheckboxClass : null}"
							selectedDownIcon="{data.half_checked ? this.outerDocument.imgInnerCheckboxClass : null}"
							currentState="{data.addRow || data.payed ? 'blank' : ''}" iconColor="{data.type == 'month' ? 0x000000 : 0x0033ff}">
						<mx:Script>
						<![CDATA[
							
							private function updateCheckDetail(data:Object):void {
								this.outerDocument.arr_rows.itemUpdated(data);
        						for (var i:int = 0; i < this.outerDocument.arr_rows.length; i++){
        							//if (this.outerDocument.arr_rows[i].row != data.row){
									if (
										(this.outerDocument.arr_rows[i].type == 'month') &&
									 	(this.outerDocument.arr_rows[i].id_object == data.id_object) &&
									 	(this.outerDocument.arr_rows[i].id_service == data.id_service)
									){
										if (this.selected){
											if (this.outerDocument.arr_rows[i].month < data.month)
												this.outerDocument.arr_rows[i].for_payment = true;
										} else {
											if (this.outerDocument.arr_rows[i].month > data.month)
												this.outerDocument.arr_rows[i].for_payment = false;
										}
        								
        								//this.outerDocument.arr_rows.itemUpdated(outerDocument.arr_rows[i]);
        							}
        						}
							}
							private function updateCheckByObject(data:Object):void {
								this.outerDocument.arr_rows_object.itemUpdated(data);
								var total_sum:Number = 0;
								for (var i:int = 0; i < this.outerDocument.arr_rows.length; i++){
									if ((this.outerDocument.arr_rows[i].id_object == data.id_object)
										&& (!this.outerDocument.arr_rows[i].addRow)){
										this.outerDocument.arr_rows[i].for_payment = data.for_payment;
										total_sum += this.outerDocument.arr_rows[i].total_sum;
									}
								}
								if (!data.for_payment){
									//set full price
									data.single_price = total_sum;
									data.total_sum = total_sum;
								}
								this.outerDocument.arr_rows_object.refresh();
							}
							private function updateCheckByService(data:Object):void {
								this.outerDocument.arr_rows_service.itemUpdated(data);
								var total_sum:Number = 0;
								for (var i:int = 0; i < this.outerDocument.arr_rows.length; i++){
									if ((this.outerDocument.arr_rows[i].id_service == data.id_service)
										&& (!this.outerDocument.arr_rows[i].addRow)){
										this.outerDocument.arr_rows[i].for_payment = data.for_payment;
										total_sum += this.outerDocument.arr_rows[i].total_sum;
									}
								}
								if (!data.for_payment){
									//set full price
									data.single_price = total_sum;
									data.total_sum = total_sum;
								}
								this.outerDocument.arr_rows_service.refresh();
							}
        					private function updateCheck():void {
        						data.for_payment = this.selected;
        						data.half_checked = false;
        						
        						if (outerDocument.cbView.selectedItem.id == 'by_services'){
									this.outerDocument.arr_rows_service.refresh();
								} else if (outerDocument.cbView.selectedItem.id == 'by_objects'){
									this.outerDocument.arr_rows_object.refresh();
								}

        						if (this.outerDocument.doAccessLevel(null) == 'new'){
	        						if (outerDocument.cbView.selectedItem.id == 'by_services'){
										updateCheckByService(data);
									} else if (outerDocument.cbView.selectedItem.id == 'by_objects'){
										updateCheckByObject(data);
									} else {
										updateCheckDetail(data);
									}
								}

        						this.outerDocument.arr_rows.refresh();
        					}
    					]]>
						</mx:Script>
						<mx:states>
							<mx:State name="blank">
								<mx:SetProperty target="{this}" name="alpha" value="0" />
								<mx:SetProperty target="{this}" name="enabled" value="false" />
								<mx:SetProperty target="{this}" name="buttonMode" value="false" />
							</mx:State>
						</mx:states>
						</mx:CheckBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="№" minWidth="25" width="25" resizable="false" dataField="row" textAlign="center" editable="false"
				 itemRenderer="DeselectableCell"
				labelFunction="{
					function (r:Object,gc:DataGridColumn):String {return r.addRow ? '' : r.row}
				}"/>
			<mx:DataGridColumn headerText="За месец" minWidth="90" resizable="false" textAlign="center" sortable="true" editable="false"
				visible="{cbView.selectedItem.id == 'detail'}"
				itemRenderer="DeselectableCell"
				sortCompareFunction="{
					function (obj1:Object, obj2:Object):int {return ObjectUtil.stringCompare(obj1.month,obj2.month)}
				}"
				labelFunction="{
					function (r:Object,gc:DataGridColumn):String {return r.addRow ? '+Свободна продажба+' : monthFormatter.format(r.month)}
				}"/>
			<mx:DataGridColumn headerText="Обект" width="175" sortable="true" editorDataField="value" visible="{cbView.selectedItem.id != 'by_services'}"
				sortCompareFunction="{
					function (obj1:Object, obj2:Object):int {
						var obj:int = ObjectUtil.stringCompare(obj1.object_name,obj2.object_name);
						return obj == 0 ? ObjectUtil.stringCompare(obj1.month,obj2.month) : obj;
					}
				}">
				<mx:itemRenderer>
					<mx:Component>
						<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off"
							currentState="{data.addRow ? 'blank' : (data.type == 'free') ? uncheckedOrUnsaved(data) ? '' : 'labelonly' : getState(data) ? '' : 'labelonly'}">
						<mx:Script>
						<![CDATA[
        					private function goToProfile(e:Event):void {
        						e.stopImmediatePropagation();
        						e.stopPropagation();
        						//ExternalInterface.call('window.open', '/telenet/page.php?page=object_info&amp;nID='+data.id_object);
        						ExternalInterface.call('dialogObjectInfo', 'nID='+data.id_object);
        					}
        					private function doClick(e:Event):void {
        						if (data.type != 'free') {
        							goToProfile(e);
        						} else {
        							outerDocument.showFreeSale(true, data);
        						}
        					}
        					private function getState(o:Object):Boolean {
        						return (o.for_payment) || (o.id > 0);
        					}
        					private function uncheckedOrUnsaved(o:Object):Boolean {
        						return (outerDocument.cbView.selectedItem.id == 'detail') && ((!o.for_payment) || (o.id == 0));
        					}
    					]]>
						</mx:Script>
						<mx:states>
							<mx:State name="labelonly">
								<mx:SetProperty target="{lb}" name="visible" value="false" />
							</mx:State>
							<mx:State name="blank" basedOn="labelonly">
								<mx:SetProperty target="{lbl}" name="visible" value="false" />
							</mx:State>
						</mx:states>
							<mx:Label id="lbl" text="{data.object_name}" left="1" textAlign="left"
								width="{getState(data) ? width-20 : width}"
								color="{getState(data) ? 0 : 0xb7babc}" fontSize="{getState(data) ? 10 : 9}"/>
							<mx:LinkButton id="lb" label="" right="2"
								verticalCenter="-1"
								toolTip="{data.type != 'free' ? 'отвори картона на обекта' : 'редактирай свободна продажба'}"
								width="{data.type != 'free' ? 17 : 18}"
								icon="{data.type != 'free' ? outerDocument.imgHistory : outerDocument.imgHistoryEdit}"
								mouseDown="doClick(event)"/>
						</mx:Canvas>
					</mx:Component>
				</mx:itemRenderer>
				<mx:itemEditor>
					<mx:Component className="objectEditor">
					<mx:Canvas width="100%" horizontalScrollPolicy="off">
						<mx:Script>
                        	<![CDATA[
                        		public function get value():String {
                        			data.object_name = edObject.text;
                        			return edObject.text;
                        		}
                        		override public function set data(value:Object):void {
                        			super.data = value;
                        			edObject.text = data.object_name;
                        			edObject.setFocus();
                        			edObject.setSelection(0,100);
                        		}
                        	]]>
                        </mx:Script>
						<mx:TextInput id="edObject" width="100%" maxChars="100"/>
					</mx:Canvas>
					</mx:Component>
				</mx:itemEditor>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Услуга" width="175" textAlign="center" editable="true"
				visible="{cbView.selectedItem.id != 'by_objects'}"
				editorDataField="value"
				sortCompareFunction="{
					function (obj1:Object, obj2:Object):int {
						var serv:int = ObjectUtil.stringCompare(obj1.service_name,obj2.service_name);
						return serv == 0 ? ObjectUtil.stringCompare(obj1.month,obj2.month) : serv;
					}
				}"
				labelFunction="{
					function (r:Object,gc:DataGridColumn):String {return r.addRow ? '' : r.service_name}
				}">
				<mx:itemRenderer>
					<mx:Component>
						<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off"
							currentState="{data.addRow ? 'blank' : isNotFree(data) ? getState(data) ? '' : 'labelonly' : 'labelonly'}">
						<mx:Script>
							<![CDATA[
								private function getState(o:Object):Boolean {
        							return (o.for_payment) || (o.id > 0);
        						}
        						private function isNotFree(o:Object):Boolean {
        							return (o.id_duty > 0) && (o.type != 'free');//(o.for_payment) || (o.id > 0);
        						}
        						private function doClick(e:Event):void {
        							if (data.type != 'free') {
        								e.stopImmediatePropagation();
        								e.stopPropagation();
        								outerDocument.showSelectRegion(data);
        								/*
        								if (data.type == 'single')
        									ExternalInterface.call('dialogSetSetupObjectSingles', data.id_duty, data.id_object);
        								else if (data.type == 'month')
        									ExternalInterface.call('dialogSetSetupObjectTaxes', data.id_duty, data.id_object);
        								*/
        							}
        						}
							]]>
						</mx:Script>
						<mx:states>
							<mx:State name="labelonly">
								<mx:SetProperty target="{lb}" name="visible" value="false" />
							</mx:State>
							<mx:State name="blank" basedOn="labelonly">
								<mx:SetProperty target="{lbl}" name="visible" value="false" />
							</mx:State>
						</mx:states>
							<mx:Label id="lbl" text="{data.service_name}" left="1" textAlign="left"
								width="{isNotFree(data) ? width-20 : width}"
								color="{getState(data) ? 0 : 0xb7babc}" fontSize="{getState(data) ? 10 : 9}"/>
							<mx:LinkButton id="lb" label="" right="2"
								toolTip="{'редактирай услуга'}"
								width="{data.type != 'free' ? 17 : 18}"
								icon="{outerDocument.imgHistory}"
								mouseDown="doClick(event)"
								verticalCenter="-1"/>
						</mx:Canvas>
					</mx:Component>
				</mx:itemRenderer>
				<mx:itemEditor>
					<mx:Component className="eduslugaEditor">
					<mx:Canvas width="100%" horizontalScrollPolicy="off">
						<mx:Script>
                        	<![CDATA[
                        		public function get value():String {
                        			data.service_name = edUsluga.text;
                        			return edUsluga.text;
                        		}
                        		override public function set data(value:Object):void {
                        			super.data = value;
                        			edUsluga.text = data.service_name;
                        			edUsluga.setFocus();
                        			edUsluga.setSelection(0,100);
                        		}
                        	]]>
                        </mx:Script>
						<mx:TextInput id="edUsluga" width="100%" maxChars="50"/>
					</mx:Canvas>
					</mx:Component>
				</mx:itemEditor>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Колич." minWidth="50" textAlign="right" itemRenderer="DeselectableCell"
				dataField="quantity" editorDataField="value"
				editable="{((cbView.selectedItem.id == 'detail') || (data.id==0))}"
				sortCompareFunction="{
					function (obj1:Object, obj2:Object):int {return ObjectUtil.numericCompare(obj1.quantity,obj2.quantity)}
				}"
				labelFunction="{
					function (r:Object,gc:DataGridColumn):String {return r.addRow ? '' : r.quantity.toString() + ' бр.'}
				}">
				<!--editable="{(bDocRight > 2) &amp;&amp; ((cbView.selectedItem.id == 'detail') || (data.id==0))}"-->
				<mx:itemEditor>
					<mx:Component className="kolEditor">
					<mx:Canvas width="100%" horizontalScrollPolicy="off">
						<mx:Script>
                        	<![CDATA[
                        		public function get value():Number {
                        			var kolich:int = isNaN(parseInt(edKol.text)) ? 0 : parseInt(edKol.text);
                        			data.total_sum = kolich * data.single_price;
                        			return kolich;
                        		}
                        		override public function set data(value:Object):void {
                        			super.data = value;
                        			edKol.text = data.quantity.toString();
                        			edKol.setFocus();
                        			edKol.setSelection(0,100);
                        		}
                        	]]>
                        </mx:Script>
						<mx:TextInput id="edKol" width="100%" restrict="1-9" maxChars="10"/>
					</mx:Canvas>
					</mx:Component>
				</mx:itemEditor>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Ед. цена" minWidth="100" textAlign="right" itemRenderer="DeselectableCell"
				dataField="single_price" editorDataField="value"
				editable="{((cbView.selectedItem.id == 'detail') || (data.id==0))}"
				sortCompareFunction="{
					function (obj1:Object, obj2:Object):int {return ObjectUtil.numericCompare(obj1.single_price,obj2.single_price)}
				}"
				labelFunction="{
					function (r:Object,gc:DataGridColumn):String {
						return r.addRow ? '' : currencyFormater.format(r.single_price)
					}
				}">
				<!--editable="{(bDocRight > 2) &amp;&amp; ((cbView.selectedItem.id == 'detail') || (data.id==0))}"-->
				<mx:itemEditor>
					<mx:Component className="edcenaEditor">
					<mx:Canvas width="100%" horizontalScrollPolicy="off">
						<mx:Script>
                        	<![CDATA[
                        		private var regEx:RegExp = /[,$]/g;
                        		private function getNumber(str:String):Number {
									var r:Number = parseFloat(str.replace(regEx,""));
									if (isNaN(r))
										r = 0;
									return r;
								}
                        		public function get value():Number {
                        			var edcena:Number = getNumber(edEdcena.text);
                        			data.total_sum = data.quantity * edcena;
                        			return edcena;
                        		}
                        		override public function set data(value:Object):void {
                        			super.data = value;
                        			//edEdcena.text = data.single_price.toString();
                        			edEdcena.text = this.outerDocument.numberFormatter.format(data.single_price).replace(regEx,"");
                        			edEdcena.setFocus();
                        			edEdcena.setSelection(0,100);
                        		}
                        	]]>
                        </mx:Script>
						<mx:TextInput id="edEdcena" width="100%" restrict="0-9.\-" maxChars="15"/>
					</mx:Canvas>
					</mx:Component>
				</mx:itemEditor>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Сума" minWidth="100" textAlign="right" editable="false"
				sortCompareFunction="{
					function (obj1:Object, obj2:Object):int {return ObjectUtil.numericCompare(obj1.total_sum,obj2.total_sum)}
				}"
				labelFunction="{
					function (r:Object,gc:DataGridColumn):String {
						return r.addRow ? '' : r.id > 0 ? currencyFormater.format(r.total_sum) : r.for_payment ? currencyFormater.format(r.total_sum) : '';
					}
				}"/>
		</telenet:columns>
	</telenet:customDataGrid>
	</mx:Canvas>

	<mx:Canvas x="10" y="425" width="269" height="78" styleName="holder"  id="panel_user" cornerRadius="7">
		<mx:Label y="10" text="Получил:" left="9"/>
		<mx:TextInput id="client_recipient" y="8" left="67" right="10" text="{aData.client_recipient}"/>
		<mx:Label y="36" text="Дължима сума:" left="67"/>
		<mx:Label id="lblDylzimaSuma" y="36" text="0.00" left="152" width="90" textAlign="right" color="#CA2824" fontWeight="bold"/>
		<mx:Label x="241" y="36" text="лв."/>
		<mx:Label y="54" text="Платена сума:" left="67"/>
		<mx:Label id="lblPayedSum" y="54" text="0.00" left="154" width="88" textAlign="right"/>
		<mx:Label x="241" y="54" text="лв."/>
	</mx:Canvas>

	<mx:Canvas x="287" y="425" width="258" height="56" styleName="holder" clipContent="false" id="canvas2">
		<mx:RadioButtonGroup id="paid_type"/>
		<mx:RadioButton id="cash" label="в брой" groupName="paid_type" labelPlacement="right" width="81"
			selected="{aData.paid_type == 'cash'}" useHandCursor="true" left="10" click="showPlashtane(true)" bottom="26" horizontalGap="1"/>
		<mx:RadioButton id="bank" label="по сметка" groupName="paid_type" labelPlacement="right"
			selected="{aData.paid_type == 'bank'}" useHandCursor="true" left="10" click="showPlashtane(false)" bottom="5" horizontalGap="1"/>
		<mx:ComboBox bottom="5" id="cbSmetka" right="5" width="160" labelField="name" dataProvider="{arr_smetki}"/>

		<mx:Canvas width="65" backgroundColor="#F2F2F2" left="10" top="-8" height="16">
			<mx:Label text="Плащане" width="100%" height="100%" fontWeight="bold" x="0" textAlign="center" verticalCenter="0"/>
		</mx:Canvas>
	</mx:Canvas>

	<mx:Canvas id="dds_holder" y="425" width="237" height="78" styleName="holder"
		 verticalScrollPolicy="off" horizontalScrollPolicy="off" right="10">
		<mx:Label text="0.00" textAlign="right" fontWeight="bold" left="110" right="19" top="3" id="lblSum"/>
		<mx:Label text="Обща стойност:" left="10" bottom="5"/>
		<mx:Label text="лв." right="-2" bottom="5"/>
		<mx:Label text="0.00" textAlign="right" id="lblDDS" fontWeight="bold" left="110" right="19" verticalCenter="0"/>
		<mx:Label text="Данъчна основа:" left="10" top="3"/>
		<mx:Label text="лв." right="-2" top="3"/>
		<mx:Label text="лв." id="lblDDSlv" right="-2" verticalCenter="0"/>
		<mx:Label text="ДДС 20%:" left="10" width="101" id="lblDDSlbl" verticalCenter="0"/>
		<mx:Label text="0.00" textAlign="right" id="lblTotal" fontWeight="bold" left="110" right="19" bottom="5"/>
	</mx:Canvas>
	<mx:Button x="718" y="515" label="Затвори" click="{ExternalInterface.call('window.close', '')}" fillAlphas="[0.3, 0.3, 1.0, 1.0]" fillColors="[#FBD2D2, #F59393]"/>
	<mx:Button x="635" y="515" label="Потвърди" click="doSave()" fillAlphas="[0.3, 0.3, 1.0, 1.0]" fillColors="[#CBEACB, #77D877]"
		visible="{bDocRight > 1}" enabled="{! save_status}"/>
	<mx:Button id="btnAnulirane" x="549" y="515" label="Анулирай" click="doAnnulment()"
		visible="{(!isHaveOrders &amp;&amp; (bSale_doc_editRight)) || (bDocRight > 2)}"/>
	<mx:Button id="btnPrint" x="484" y="515" label="Печат" click="doPrint()"
		visible="{bDocRight > 0}"/>
		
	<mx:Button id="btnKrIzv" x="446" y="490" label="Д.И" toolTip="Дебитно известие" click="doDI()"
		visible="{bDocRight > 2}"/>
	<mx:Button id="btnDebIzv" x="498" y="490" label="К.И" toolTip="Кредитно известие" click="doKI()"
		visible="{bDocRight > 2}"/>

	<mx:Canvas x="10" y="10" width="346" height="123" styleName="holder" id="canvas_poluchatel" clipContent="false">
		<mx:Canvas y="-9" width="54" height="17" backgroundColor="#F2F2F2" left="10" id="canvas_poluchatel_l" cornerRadius="7" borderStyle="solid" borderThickness="0">
			<mx:Label y="0" text="Клиент" width="100%" height="100%" fontWeight="bold" x="0" textAlign="center"/>
		</mx:Canvas>
		<ui:AutoComplete id="client_name" y="10" right="30" left="55" dataProvider="{ arr_clients }" 
			dropDownItemRenderer="ClientRenderer"
			labelField="name" matchType="anyPart"
			isStrict="false" style="{ AutoComplete.STYLE_MAC_MAIL }"
			allowDuplicates="false"
			areNewItemsEditable="false"
			change="handleAutoCompleteChange(event)"
			keyUp="getData(event)" />
		<ui:AutoComplete id="client_address" y="37" right="10" left="55" dataProvider="{ arr_clients }"
			dropDownItemRenderer="ClientRenderer"
			labelField="address"
			isStrict="false" style="{ AutoComplete.STYLE_MAC_MAIL }"
			allowDuplicates="false"
			areNewItemsEditable="false"
			change="handleAutoCompleteChange(event)"
			keyUp="getData(event)" />
		<ui:AutoComplete id="client_ein" y="64" width="110" left="55" dataProvider="{ arr_clients }"
			dropDownItemRenderer="ClientRenderer"
			labelField="invoice_ein"
			isStrict="false" style="{ AutoComplete.STYLE_MAC_MAIL }"
			allowDuplicates="false"
			areNewItemsEditable="false"
			change="handleAutoCompleteChange(event)"
			keyUp="getData(event)" />
		<ui:AutoComplete id="client_ein_dds" y="64" width="115" right="10" dataProvider="{ arr_clients }"
			dropDownItemRenderer="ClientRenderer"
			labelField="invoice_ein_dds"
			isStrict="false" style="{ AutoComplete.STYLE_MAC_MAIL }"
			allowDuplicates="false"
			areNewItemsEditable="false"
			change="handleAutoCompleteChange(event)"
			keyUp="getData(event)" />
		<ui:AutoComplete id="client_mol" y="91" right="10" left="55" dataProvider="{ arr_clients }"
			dropDownItemRenderer="ClientRenderer"
			labelField="invoice_mol"
			isStrict="false" style="{ AutoComplete.STYLE_MAC_MAIL }"
			allowDuplicates="false"
			areNewItemsEditable="false"
			change="handleAutoCompleteChange(event)"
			keyUp="getData(event)" />

		<mx:LinkButton y="10" right="10" label="" width="17" icon="{imgHistory}" visible="{currClientID > 0}"
			toolTip="отвори картона на клиента" click="{goClientProfile()}"/>
		<mx:Label x="10" y="13" text="Име:"/>
		<mx:Label x="10" y="39" text="Адрес:"/>
		<mx:Label x="10" y="67" text="ИН:"/>
		<mx:Label x="10" y="95" text="МОЛ:"/>
		<mx:Label y="68" text="по ДДС:" left="177"
			fontSize="9" fontAntiAliasType="advanced" fontSharpness="0" fontThickness="0" fontGridFitType="pixel" fontFamily="Arial"/>
	</mx:Canvas>

	<mx:Canvas x="10" y="140" width="170" height="22" visible="{(doAccessLevel(aData) == 'new')}">
		<mx:Label id="lblDate" text="{getCurrentDate(currDate)}" verticalCenter="0" horizontalCenter="2"/>
		<mx:LinkButton width="45" left="0" icon="@Embed(source='001_23.png')"
			click="{updateCurrentDate(-1)}" verticalCenter="0"/>
		<mx:LinkButton width="45" icon="@Embed(source='001_21.png')"
			click="{updateCurrentDate(+1)}" verticalCenter="0" right="0"/>
	</mx:Canvas>
	<mx:Label id="lblDocAnn" x="10" y="140" width="346" visible="{isDocCanceled()}" color="red" fontSize="15"
		text="АНУЛИРАН" textAlign="center" fontWeight="bold"/>

	<mx:Canvas id="haveAdviceCanvas" x="10" y="135" height="33" width="346" visible="false"
		horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:Label text="Има издадено кредитно/дебитно известие  :" x="0" verticalCenter="0" color="red"/>
		<mx:LinkButton label="{aData.advice_num}" right="0" verticalCenter="0"
			click="{ExternalInterface.call('dialogSale2', aData.id_advice)}"/>
	</mx:Canvas>
	
	<mx:Button y="140" label="Търси" click="showSearch()" id="btnSearch" width="80" right="488" icon="@Embed(source='001_38.png')"
		visible="{(doAccessLevel(aData) == 'new')}"/>
	
	<mx:Label x="287" y="491" text="Изглед:" id="label4" visible="{isViewVisible(aData, arr_rows)}"/>
	<mx:ComboBox id="cbView" x="335" y="491" width="99" dataProvider="{arr_doc_view}" selectedIndex="3" labelField="label"
			change="{doChangeView()}" height="20"
			visible="{isViewVisible(aData, arr_rows)}"/>

	<mx:Move id="myMove" target="{order_holder}" duration="1500" easingFunction="Elastic.easeOut" effectEnd="moveEnd()"/>
	<mx:Canvas y="543" height="300" id="order_holder" backgroundColor="#EFEAEA" left="5" styleName="holder"
		right="5" clipContent="false">
		<mx:Image id="btnOpenOrder" y="-25" width="32" height="32" click="hidePanel()" horizontalCenter="0" 
			source="{imgArrowUpClass}" toolTip="Отвори информация за ордер" buttonMode="true"/>
			
		<mx:Canvas width="273" height="40" styleName="extension"  backgroundColor="#EFEAEA" x="0" y="-33">
			<mx:Image id="imgNote" x="2" y="9" source="{imgHistory}" filters="{[glowf]}" visible="false" click="hidePanel()"/>
			<mx:Label x="18" y="10" text="{'Клиента предпочита: '+ invoicePaymentToString(aData.invoice_payment)}" id="lblInvoicePayment"/>
		</mx:Canvas>
		<mx:TextArea x="10" y="10" text="{aData.note}" width="250" height="79" id="note"/>
		<mx:Label x="10" y="97" width="250" text="{'Създал: '+aData.created_user+' ['+aData.created_time+']'}" id="label2"/>
		<mx:Label x="10" y="118" width="250" text="{'Редактирал: '+aData.updated_user+' ['+aData.updated_time+']'}" id="label3"/>
		
		<mx:DataGrid y="10" width="497" height="125" dataProvider="{arr_orders}" styleName="grid" borderStyle="solid"
			sortableColumns="false" editable="false" draggableColumns="false" selectable="false" 
			right="10" visible="{bOrderRight > 0}"
			rollOverColor="#F5F5DC">
			<mx:Script>
				<![CDATA[
            	public function getLabel(o:Object, gridcolumn:DataGridColumn):String {
            		switch(gridcolumn.dataField){
						case "date" : return bgDateFormatter.format(o.date);
						case "sum" : return currencyFormater.format(o.sum);
					}
					return "";
            	}
        		]]>
			</mx:Script>
			<mx:columns>
				<mx:DataGridColumn headerText="Номер" dataField="num" textAlign="right" width="60"
					itemRenderer="OrderLink"/>
				<mx:DataGridColumn headerText="Дата" dataField="date" labelFunction="getLabel" textAlign="center" 
					width="90"/>
				<mx:DataGridColumn headerText="Сметка" dataField="smetka" textAlign="center"/>
				<mx:DataGridColumn headerText="Сума" dataField="sum" labelFunction="getLabel" textAlign="right"
					width="100" itemRenderer="OrderRenderer"/>
				<mx:DataGridColumn headerText="Служител" dataField="user" textAlign="center"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:Canvas y="1" height="7" backgroundColor="#EFEAEA" right="507" left="1"/>

		<mx:Label x="281" y="148" text="Сметка:" visible="{isOrderVisible(lblDylzimaSuma.text, lblDocNum.text,bOrderRight)}"/>
		<mx:ComboBox id="cbSmetkaOrder" x="331" y="146" width="180" dataProvider="{arr_smetki_orders}" labelField="name"
			visible="{isOrderVisible(lblDylzimaSuma.text, lblDocNum.text, bOrderRight)}"/>
		<mx:Label x="518" y="148" text="Сума:" visible="{isOrderVisible(lblDylzimaSuma.text, lblDocNum.text,bOrderRight)}"/>
		<mx:TextInput id="eOrderSum" x="555" y="146" width="108" textAlign="right" visible="{isOrderVisible(lblDylzimaSuma.text, lblDocNum.text,bOrderRight)}"/>
		<mx:Button y="145" label="Добави" icon="{imgAddBigClass}" cornerRadius="7" height="22" width="87" right="10"
			click="makeOrder()" visible="{isOrderVisible(lblDylzimaSuma.text, lblDocNum.text,bOrderRight)}"/>

	</mx:Canvas>
</app:FrameworkApplication>