<?xml version="1.0" encoding="utf-8"?>
<app:FrameworkApplication
	xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:app="net.telepol.app.*" xmlns:ns1="*"
	xmlns:ns2="net.telepol.ui.*"
	layout="absolute" styleName="telenet"
	applicationComplete="load()"
	initialize="init()">

<mx:Style source="main.css"/>

<mx:Script>
<![CDATA[
	import mx.controls.Alert;
	import mx.formatters.SwitchSymbolFormatter;
	import net.telepol.rpc.FlexVar;
	import mx.utils.ObjectUtil;
	import mx.collections.ICollectionView;
	import mx.controls.Tree;
	import mx.events.ListEvent;
	import mx.collections.ArrayCollection;
	[Bindable] public var receipt_id:int = 0;
	[Bindable] public var receipt_name:String = "";
	[Bindable] public var receipt_firm_id:String = "";//int = -1;
	[Bindable] public var receipt_region_id:String = "";//int = -1;
	[Bindable] public var receipt_object_id:int = -1;
	[Bindable] public var receipt_object_name:String = "";
	
	[Bindable] public var arr_object:ArrayCollection;
	 
	[Bindable] public var arr_receipt:ArrayCollection = new ArrayCollection();
	[Bindable] public var arr_firms_regions:ArrayCollection;
	
	[Bindable] public var arr_positions:ArrayCollection;
	
	[Bindable] public var arr_earnings:ArrayCollection;
	[Bindable] public var arr_expenses:ArrayCollection;

	[Bindable] public var arr_service:ArrayCollection = new ArrayCollection();
	[Bindable] public var arr_activity:ArrayCollection = new ArrayCollection();
	[Bindable] public var arr_operation:ArrayCollection = new ArrayCollection();
	
	private var want_init:Boolean = false;
	private function load():void {
		want_init = true;
		receipt_id = HTML_params.hasOwnProperty('receipt_id') ? HTML_params['receipt_id'] : 0;
		amfService.init(
			new FlexVar('receipt_id', receipt_id),
			false
		);
	}
	private function init():void {
		amfService.addEventListener("onResponse", onResponse);
		amfService.addEventListener("onFault", onFault);
	}
	private function onResponse(e:Event):void {
		if (want_init){
			want_init = false;
			receiptGroupByFirm.refresh();
			var receiptfirm:Object = receiptGroupByFirm.getRoot();
			cbReceiptFirm.dataProvider = receiptfirm;
			
			rowsGroupByFirm.refresh();
			var gg:Object = rowsGroupByFirm.getRoot();
			cbFirms.dataProvider = gg;
			
			cbReceiptFirm.selectedIndex = -1;
			if (receipt_firm_id != ""){
				for (var firmi:int = 0; firmi < cbReceiptFirm.dataProvider.length; firmi++){
					if (receipt_firm_id == cbReceiptFirm.dataProvider[firmi].GroupLabel){
						cbReceiptFirm.selectedIndex = firmi;
						break;
					}
				}
			}

			cbReceiptRegion.selectedIndex = -1;
			if (receipt_region_id != ""){
				for (var regioni:int = 0; regioni < cbReceiptFirm.selectedItem.children.length; regioni++){
					if (cbReceiptFirm.selectedItem.children[regioni].rcode == receipt_region_id){
						cbReceiptRegion.selectedIndex = regioni;
						break;
					}
				}
			}
			/*
			if (cbFirms.selectedItem != null){
				if (treeService.selectedItem.hasOwnProperty('region_id')){
					for (var regioni:int = 0; regioni < cbFirms.selectedItem.children.length; regioni++){
						if (cbFirms.selectedItem.children[regioni].rcode == e.target.selectedItem.region_id){
							cbRegions.selectedIndex = regioni;
							break;
						}
					}
				}
			}
			*/

			eReceiptObject.text = receipt_object_name;
			treeService.selectedItem = null;
			onItemClick(null);
		}
	}
	private function onFault(e:Event):void {
		want_init = false;
	}

	private function onItemClick(e:ListEvent):void {
		if (e == null){
			cnvData.visible = false;
			lbl_service_correction.visible = false;
			cbEarning_correction.visible = false;
			cnvButtons.visible = false;
			lbl.text = "";
			return;
		}
		
		cnvData.visible = !e.target.dataDescriptor.isBranch(e.target.selectedItem);
		var service:Boolean = false;
		switch ((e.currentTarget as Tree).selectedItem.type){
			case 'service':
				lbl.text = 'Услуга "'+e.target.selectedItem.name+'"';
				btnAdd.label = 'Добави дейност';
				cbAdd.dataProvider = arr_activity;
				service = true;
				break;
			case 'activity':
				lbl.text = 'Дейност "'+e.target.selectedItem.name+'"';
				btnAdd.label = 'Добави операция';
				cbAdd.dataProvider = arr_operation;
				break;
			case 'operation':
				lbl.text = 'Операция "'+e.target.selectedItem.name+'"';
				break;
		}
		lbl_service_correction.visible = service;
		cbEarning_correction.visible = service;
		
		if (cnvData.visible){
			//load data
			if (treeService.selectedItem.hasOwnProperty('region_type'))
				cbFirmRegionType.selectedIndex = e.target.selectedItem.region_type;
			else
				cbFirmRegionType.selectedIndex = 0;

			cbFirms.selectedIndex = -1;
			if (treeService.selectedItem.hasOwnProperty('firm_id')){
				for (var firmi:int = 0; firmi < cbFirms.dataProvider.length; firmi++){
					if (e.target.selectedItem.firm_id == cbFirms.dataProvider[firmi].GroupLabel){
						cbFirms.selectedIndex = firmi;
						break;
					}
				}
			}
			
			cbRegions.selectedIndex = -1;
			if (cbFirms.selectedItem != null){
				if (treeService.selectedItem.hasOwnProperty('region_id')){
					for (var regioni:int = 0; regioni < cbFirms.selectedItem.children.length; regioni++){
						if (cbFirms.selectedItem.children[regioni].rcode == e.target.selectedItem.region_id){
							cbRegions.selectedIndex = regioni;
							break;
						}
					}
				}
			}

			if (treeService.selectedItem.hasOwnProperty('price'))
				edPrice.text = e.target.selectedItem.price;
			else
				edPrice.text = '0.00';

			if (treeService.selectedItem.hasOwnProperty('price_type'))
				cbPriceType.selectedIndex = e.target.selectedItem.price_type;
			else
				cbPriceType.selectedIndex = 0;
				
			cbEarning.selectedIndex = -1;
			if (treeService.selectedItem != null){
				if (treeService.selectedItem.hasOwnProperty('earning_id')){
					for (var earnid:int = 0; earnid < arr_earnings.length; earnid++){
						if (arr_earnings[earnid].id == e.target.selectedItem.earning_id){
							cbEarning.selectedIndex = earnid;
							break;
						}
					}
				}
			}
			
			cbExpense.selectedIndex = -1;
			if (treeService.selectedItem != null){
				if (treeService.selectedItem.hasOwnProperty('expense_id')){
					for (var expid:int = 0; expid < arr_expenses.length; expid++){
						if (arr_expenses[expid].id == e.target.selectedItem.expense_id){
							cbExpense.selectedIndex = expid;
							break;
						}
					}
				}
			}

			cbPosition.selectedIndex = -1;
			if (treeService.selectedItem != null){
				if (treeService.selectedItem.hasOwnProperty('position_id')){
					for (var posid:int = 0; posid < arr_positions.length; posid++){
						if (arr_positions[posid].id == e.target.selectedItem.position_id){
							cbPosition.selectedIndex = posid;
							break;
						}
					}
				}
			}

		}
		
		if (cbEarning_correction.visible) {
			cbEarning_correction.selectedIndex = -1;
			if (treeService.selectedItem != null){
				if (treeService.selectedItem.hasOwnProperty('earning_correction_id')){
					for (var earn_corr_id:int = 0; earn_corr_id < arr_earnings.length; earn_corr_id++){
						if (arr_earnings[earn_corr_id].id == e.target.selectedItem.earning_correction_id){
							cbEarning_correction.selectedIndex = earn_corr_id;
							break;
						}
					}
				}
			}
		} else {
			cbEarning_correction.selectedIndex = -1;
		}
		
		cnvButtons.visible = ((e.target.selectedItem.type == 'service') || (e.target.selectedItem.type == 'activity'));
		
		/*
		if(e.target.dataDescriptor.isBranch(e.target.selectedItem)) {
			e.stopImmediatePropagation();
			var isopen:Boolean = treeService.isItemOpen(e.itemRenderer.data);
			//(this as Tree).expandChildrenOf(e.itemRenderer.data, ! isopen);
			treeService.expandItem(e.itemRenderer.data, ! isopen, true);
		} else {
		}
		*/
	}

	private function onBtnAddClick():void {	
		switch (treeService.selectedItem.type){
			case 'service':
				var newItemAct:Object = {type:'activity'};
				newItemAct.id = cbAdd.selectedItem.id;
				newItemAct.name = cbAdd.selectedItem.name;
				if (treeService.selectedItem.hasOwnProperty('children')){
					if (treeService.selectedItem.children == null)
						treeService.selectedItem.children = [];
				} else {
					treeService.selectedItem.children = [];
				}
				treeService.selectedItem.children.push(newItemAct);
				arr_receipt.itemUpdated(newItemAct);
				treeService.expandChildrenOf(treeService.selectedItem, true);
				cnvData.visible = false;
				break;
			case 'activity':
				var newItemOp:Object = {type:'operation'};
				newItemOp.id = cbAdd.selectedItem.id;
				newItemOp.name = cbAdd.selectedItem.name;
				if (treeService.selectedItem.hasOwnProperty('children')){
					if (treeService.selectedItem.children == null)
						treeService.selectedItem.children = [];
				} else {
					treeService.selectedItem.children = [];
				}
				treeService.selectedItem.children.push(newItemOp);
				arr_receipt.itemUpdated(newItemOp);
				treeService.expandChildrenOf(treeService.selectedItem, true);
				cnvData.visible = false;
				break;
		}
	}
	
	private function addService():void {
		var newItemSrv:Object = {type:'service'};
		newItemSrv.id = cbService.selectedItem.id;
		newItemSrv.name = cbService.selectedItem.name;
		
		newItemSrv.region_type = 1;
		newItemSrv.firm_id = -1;
		newItemSrv.region_id = -1;
		newItemSrv.price = '0.00';
		newItemSrv.price_type = 0;
		newItemSrv.earning_id = -1;
		newItemSrv.expense_id = -1;
		newItemSrv.position_id = -1;
		
		newItemSrv.earning_correction_id = -1;

		arr_receipt.addItem(newItemSrv);
	}
	
	private function doSave():void {
		treeService.selectedItem.region_type = cbFirmRegionType.selectedIndex;
		treeService.selectedItem.firm_id = cbFirms.selectedIndex >= 0 ? cbFirms.selectedItem.children[0].fcode : -1;
		treeService.selectedItem.region_id = cbRegions.selectedIndex >= 0 ? cbRegions.selectedItem.rcode : -1;
		treeService.selectedItem.price = edPrice.text;
		treeService.selectedItem.price_type = cbPriceType.selectedIndex;
		//
		treeService.selectedItem.earning_id = cbEarning.selectedIndex >= 0 ? cbEarning.selectedItem.id : -1;
		treeService.selectedItem.expense_id = cbExpense.selectedIndex >= 0 ? cbExpense.selectedItem.id : -1;
		treeService.selectedItem.position_id = cbPosition.selectedIndex >= 0 ? cbPosition.selectedItem.id : -1;
		
		treeService.selectedItem.earning_correction_id = cbEarning_correction.selectedIndex >= 0 ? cbEarning_correction.selectedItem.id : -1;
	}
	
	private function doSaveReceipt():void {
		receipt_object_id = eReceiptObject.text != '' ? receipt_object_id : -1;
		amfService.save(
			new FlexVar('arr_receipt', arr_receipt.source),

			new FlexVar('receipt_id', receipt_id),
			new FlexVar('receipt_name', eName.text),
			new FlexVar('receipt_firm_id', cbReceiptFirm.selectedItem.children[0].fcode),
			new FlexVar('receipt_region_id', cbReceiptRegion.selectedItem.rcode),
			new FlexVar('receipt_object_id', receipt_object_id),
			false
		)
	}

	private function doDelete():void {
		var parentItem:Object = treeService.getParentItem ( treeService.selectedItem );
		if (parentItem == null){
			for (var j:int=0; j < arr_receipt.length; j++){
				if (treeService.selectedItem.name == arr_receipt[j].name){
					arr_receipt.removeItemAt(j);
					break;
				}
			}
		} else {
			for(var i:int = 0; i < parentItem.children.length; i++){
				if (treeService.selectedItem.name == parentItem.children[i].name){
					(parentItem.children as Array).splice(i, 1);
					//delete parentItem.children[i];
					if ((parentItem.children as Array).length == 0)
						parentItem.children = null;
					treeService.invalidateList();
					break;
				}
			}
		}
		onItemClick(null);
		//treeService.dataDescriptor.removeChildAt(nodeToBeRemoved.parent(), nodeToBeRemoved, nodeToBeRemoved.childIndex());
	}
	
	private function positionCompareFunction(a:Object, b:Object):int {
		if (a.fcode != b.fcode)
			return (a.fcode < b.fcode) ? -1 : 1;
		else
			return ObjectUtil.stringCompare(a.region, b.region);
	}
	private function firm(item:Object):String {
		if (item && item.hasOwnProperty('children') && item.children && (item.children.length > 0))
			return item.children[0].firm
		else return ''
	}

	// Object
	private var intervalId:uint = 0;
	private var suggest_field:String = '';
	private var suggest_value:String = '';
			
	private function getDataObject(e:KeyboardEvent):void {
		clearTimeout(intervalId);

		suggest_field = e.currentTarget.labelField;
		suggest_value = e.currentTarget.currentText;
		
		if (e.currentTarget.currentText.length > 0)
			if ((e.charCode > 0) && (e.keyCode != 27) && (e.keyCode != 13)){
				intervalId = setTimeout(queryObject, 100);
			}
	}
	
	private function queryObject():void {
		if (suggest_field != '')
			amfService.suggestObject(
				new FlexVar('field', suggest_field),
				new FlexVar('info', suggest_value),
				new FlexVar('status', 0),
				false
			);
	}

	private function handleAutoCompleteObjectChange(e:Event):void {
		var obj:Object = e.currentTarget.selectedItem;
		if (obj.hasOwnProperty('object_name')){
			receipt_object_id = obj.id;
	
			//object_num.text = obj.num;
			//object_name.text = obj.object_name;
			//object_mol.text = obj.mol;
			//object_address.text = obj.address;
		}
	}
]]>
</mx:Script>
	<mx:GroupingCollection id="rowsGroupByFirm" source="{arr_firms_regions}">
    	<mx:grouping>
    		<mx:Grouping>
    			<mx:GroupingField name="fcode" numeric="true" compareFunction="positionCompareFunction"/> 
    		</mx:Grouping>
    	</mx:grouping>
    </mx:GroupingCollection>
    
    <mx:GroupingCollection id="receiptGroupByFirm" source="{arr_firms_regions}">
    	<mx:grouping>
    		<mx:Grouping>
    			<mx:GroupingField name="fcode" numeric="true" compareFunction="positionCompareFunction"/> 
    		</mx:Grouping>
    	</mx:grouping>
    </mx:GroupingCollection>
    
	<mx:Tree id="treeService" x="23" y="116" width="281" height="338"
		dataProvider="{arr_receipt}" labelField="name" itemClick="onItemClick(event)"/>

	<mx:Canvas x="312" y="116" width="347" height="338" styleName="holder">
		<mx:Label y="5" text="" id="lbl" left="10" right="10" textAlign="center" fontWeight="bold"/>
		<mx:Label x="10" y="35" text="Ном. приходи:" id="lbl_service_correction"/>
		<mx:ComboBox id="cbEarning_correction" x="106" y="33" width="229"
			dataProvider="{arr_earnings}" labelField="name" change="doSave()"/>

		<mx:Canvas id="cnvData" visible="true" width="100%" height="100%">
			<mx:Label x="10" y="67" text="Фирма / Регион"/>
			<mx:Label x="10" y="93" text="са:"/>
			<mx:ComboBox id="cbFirmRegionType" x="35" y="91" width="300" change="doSave()">
				<mx:dataProvider>
					<mx:String>винаги следните</mx:String>
					<mx:String>като настроените в обекта</mx:String>
					<mx:String>редактируеми, по подразбиране са следните</mx:String>
				</mx:dataProvider>
			</mx:ComboBox>
			<mx:ComboBox x="10" y="119" id="cbFirms" width="160" visible="{cbFirmRegionType.selectedIndex != 1}"
				dataProvider="{rowsGroupByFirm}" labelFunction="{firm}"
				change="doSave()"/>
			<mx:ComboBox x="175" y="119" id="cbRegions" width="160" visible="{cbFirmRegionType.selectedIndex != 1}"
				dataProvider="{cbFirms.selectedItem.children}" labelField="region"
				change="doSave()"/>
			
			<mx:Label x="10" y="162" text="Цена:"/>
			<mx:TextInput x="49" y="160" width="61" textAlign="right" id="edPrice" restrict="0-9\." maxChars="8"
				change="doSave()"/>
			<mx:ComboBox x="112" y="160" width="223" id="cbPriceType" change="doSave()">
				<mx:dataProvider>
					<mx:String>лв. от цената на услугата</mx:String>
					<mx:String>процента от цената на услугата</mx:String>
				</mx:dataProvider>
			</mx:ComboBox>
			<mx:Label x="10" y="200" text="Ном. приходи:"/>
			<mx:ComboBox id="cbEarning" x="106" y="198" width="229"
				dataProvider="{arr_earnings}" labelField="name"
				change="doSave()"/>
			<mx:Label x="10" y="235" text="Ном. разходи:"/>
			<mx:ComboBox id="cbExpense" x="106" y="233" width="229"
				dataProvider="{arr_expenses}" labelField="name"
				change="doSave()"/>
			<mx:Label x="10" y="268" text="Длъжност:"/>
			<mx:ComboBox id="cbPosition" x="80" y="266" width="255" labelField="name"
				dataProvider="{arr_positions}"
				change="doSave()"/>
		</mx:Canvas>
		
		<!--<mx:Button x="269" y="304" label="Запази" styleName="btnStyleDone" click="doSave()"
			visible="{cbEarning_correction.visible || cnvData.visible}" enabled="false"/>-->
	</mx:Canvas>
	
	<mx:Canvas x="23" y="460" width="636" height="24" id="cnvButtons" visible="false">
		<mx:ComboBox id="cbAdd" labelField="name" verticalCenter="0" left="0" width="281"/>
		<mx:Button id="btnAdd" label="Button" verticalCenter="0" click="onBtnAddClick()" right="205" width="142"/>
	</mx:Canvas>
	
	<mx:Button id="btnSave" label="Запази рецептурника" y="462" left="500" width="159" styleName="btnStyleDone"
		enabled="{arr_receipt.length != 0}" click="doSaveReceipt()"/>
	
	<mx:ComboBox x="23" y="86" width="281" id="cbService" dataProvider="{arr_service}" labelField="name"/>
	<mx:Button x="312" y="86" label="Добави" fillAlphas="[0.3, 0.3, 0.6, 0.6]" fillColors="[#BDC1FB, #727BF2]"
		enabled="{arr_receipt.length == 0}" click="addService()"/>
	<mx:Button x="389" y="86" label="Изтрий" styleName="btnStyleClose" click="doDelete()" visible="{treeService.selectedItem != null}"/>
		
	<mx:Label x="23" y="10" text="Рецептурник:"/>
	<mx:TextInput x="108" y="8" width="200" id="eName" text="{receipt_name}"/>
	
	<mx:Label x="23" y="36" text="Фирма:"/>
	<mx:ComboBox x="70" y="34" id="cbReceiptFirm" dataProvider="{receiptGroupByFirm}" labelFunction="{firm}" width="180"/>
	
	<mx:Label x="258" y="36" text="Регион:"/>
	<mx:ComboBox x="309" y="34" id="cbReceiptRegion" dataProvider="{cbReceiptFirm.selectedItem.children}" labelField="region" width="217"/>
	
	<mx:Label x="336" y="10" text="Обект:"/>
	<ns2:AutoComplete x="389" y="8" width="270" id="eReceiptObject"
		dataProvider="{ arr_object }"
		dropDownItemRenderer="ObjectRenderer"
		minComboWidth="350"
		labelField="object_name" matchType="anyPart"
		isStrict="false" style="{ AutoComplete.STYLE_MAC_MAIL }"
		allowDuplicates="false"
		areNewItemsEditable="false"
		change="handleAutoCompleteObjectChange(event)"
		keyUp="getDataObject(event)"
	/>

</app:FrameworkApplication>